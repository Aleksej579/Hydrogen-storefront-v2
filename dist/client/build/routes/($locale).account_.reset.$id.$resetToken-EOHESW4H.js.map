{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account_.reset.$id.$resetToken.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/($locale).account_.reset.$id.$resetToken.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/($locale).account_.reset.$id.$resetToken.jsx\");\n  import.meta.hot.lastModified = \"1702303141694.8804\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from '@shopify/remix-oxygen';\nimport { Form, useActionData } from '@remix-run/react';\n\n/**\n * @type {MetaFunction}\n */\nexport const meta = () => {\n  return [{\n    title: 'Reset Password'\n  }];\n};\n\n/**\n * @param {ActionFunctionArgs}\n */\nexport async function action({\n  request,\n  context,\n  params\n}) {\n  if (request.method !== 'POST') {\n    return json({\n      error: 'Method not allowed'\n    }, {\n      status: 405\n    });\n  }\n  const {\n    id,\n    resetToken\n  } = params;\n  const {\n    session,\n    storefront\n  } = context;\n  try {\n    if (!id || !resetToken) {\n      throw new Error('customer token or id not found');\n    }\n    const form = await request.formData();\n    const password = form.has('password') ? String(form.get('password')) : '';\n    const passwordConfirm = form.has('passwordConfirm') ? String(form.get('passwordConfirm')) : '';\n    const validInputs = Boolean(password && passwordConfirm);\n    if (validInputs && password !== passwordConfirm) {\n      throw new Error('Please provide matching passwords');\n    }\n    const {\n      customerReset\n    } = await storefront.mutate(CUSTOMER_RESET_MUTATION, {\n      variables: {\n        id: `gid://shopify/Customer/${id}`,\n        input: {\n          password,\n          resetToken\n        }\n      }\n    });\n    if (customerReset?.customerUserErrors?.length) {\n      throw new Error(customerReset?.customerUserErrors[0].message);\n    }\n    if (!customerReset?.customerAccessToken) {\n      throw new Error('Access token not found. Please try again.');\n    }\n    session.set('customerAccessToken', customerReset.customerAccessToken);\n    return redirect('/account', {\n      headers: {\n        'Set-Cookie': await session.commit()\n      }\n    });\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({\n        error: error.message\n      }, {\n        status: 400\n      });\n    }\n    return json({\n      error\n    }, {\n      status: 400\n    });\n  }\n}\nexport default function Reset() {\n  _s();\n  /** @type {ActionReturnData} */\n  const action = useActionData();\n  return <div className=\"account-reset\">\n      <h1>Reset Password.</h1>\n      <p>Enter a new password for your account.</p>\n      <Form method=\"POST\">\n        <fieldset>\n          <label htmlFor=\"password\">Password</label>\n          <input aria-label=\"Password\" autoComplete=\"current-password\"\n        // eslint-disable-next-line jsx-a11y/no-autofocus\n        autoFocus id=\"password\" minLength={8} name=\"password\" placeholder=\"Password\" required type=\"password\" />\n          <label htmlFor=\"passwordConfirm\">Re-enter password</label>\n          <input aria-label=\"Re-enter password\" autoComplete=\"current-password\" id=\"passwordConfirm\" minLength={8} name=\"passwordConfirm\" placeholder=\"Re-enter password\" required type=\"password\" />\n        </fieldset>\n        {action?.error ? <p>\n            <mark>\n              <small>{action.error}</small>\n            </mark>\n          </p> : <br />}\n        <button type=\"submit\">Reset</button>\n      </Form>\n      <br />\n      <p>\n        <a href=\"/account/login\">Back to login \u2192</a>\n      </p>\n    </div>;\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customerreset\n_s(Reset, \"YVzOeyDMt3QGe4z2+NJx3IYjE/U=\", false, function () {\n  return [useActionData];\n});\n_c = Reset;\nconst CUSTOMER_RESET_MUTATION = `#graphql\n  mutation customerReset(\n    $id: ID!,\n    $input: CustomerResetInput!\n    $country: CountryCode\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerReset(id: $id, input: $input) {\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n/**\n * @typedef {{\n *   error: string | null;\n * }} ActionResponse\n */\n\n/** @typedef {import('@shopify/remix-oxygen').ActionFunctionArgs} ActionFunctionArgs */\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof action>} ActionReturnData */\nvar _c;\n$RefreshReg$(_c, \"Reset\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;AA8GM;AA7GN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,8DAAgE,EAAE;AAAA,EAC3G;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAyD;AACzD,cAAY,IAAI,eAAe;AACjC;AASO,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,CAAC;AACH;AA0Ee,SAAR,QAAyB;AAC9B,KAAG;AAEH,QAAM,SAAS,cAAc;AAC7B,SAAO,mDAAC,SAAI,WAAU,iBAClB;AAAA,uDAAC,QAAG,+BAAJ;AAAA;AAAA;AAAA;AAAA,WAAmB;AAAA,IACnB,mDAAC,OAAE,sDAAH;AAAA;AAAA;AAAA;AAAA,WAAyC;AAAA,IACzC,mDAAC,QAAK,QAAO,QACX;AAAA,yDAAC,cACC;AAAA,2DAAC,WAAM,SAAQ,YAAW,wBAA1B;AAAA;AAAA;AAAA;AAAA,eAAkC;AAAA,QAClC;AAAA,UAAC;AAAA;AAAA,YAAM,cAAW;AAAA,YAAW,cAAa;AAAA,YAE5C,WAAS;AAAA,YAAC,IAAG;AAAA,YAAW,WAAW;AAAA,YAAG,MAAK;AAAA,YAAW,aAAY;AAAA,YAAW,UAAQ;AAAA,YAAC,MAAK;AAAA;AAAA,UAFzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAEoG;AAAA,QACpG,mDAAC,WAAM,SAAQ,mBAAkB,iCAAjC;AAAA;AAAA;AAAA;AAAA,eAAkD;AAAA,QAClD,mDAAC,WAAM,cAAW,qBAAoB,cAAa,oBAAmB,IAAG,mBAAkB,WAAW,GAAG,MAAK,mBAAkB,aAAY,qBAAoB,UAAQ,MAAC,MAAK,cAA9K;AAAA;AAAA;AAAA;AAAA,eAAyL;AAAA,WAN3L;AAAA;AAAA;AAAA;AAAA,aAOA;AAAA,MACC,QAAQ,QAAQ,mDAAC,OACd,6DAAC,UACC,6DAAC,WAAO,iBAAO,SAAf;AAAA;AAAA;AAAA;AAAA,aAAqB,KADvB;AAAA;AAAA;AAAA;AAAA,aAEA,KAHa;AAAA;AAAA;AAAA;AAAA,aAIf,IAAO,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,MACb,mDAAC,YAAO,MAAK,UAAS,qBAAtB;AAAA;AAAA;AAAA;AAAA,aAA2B;AAAA,SAd7B;AAAA;AAAA;AAAA;AAAA,WAeA;AAAA,IACA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,WAAI;AAAA,IACJ,mDAAC,OACC,6DAAC,OAAE,MAAK,kBAAiB,oCAAzB;AAAA;AAAA;AAAA;AAAA,WAAwC,KAD1C;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OAtBG;AAAA;AAAA;AAAA;AAAA,SAuBL;AACJ;AAGA,GAAG,OAAO,gCAAgC,OAAO,WAAY;AAC3D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AA+BL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
