{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account_.activate.$id.$activationToken.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/($locale).account_.activate.$id.$activationToken.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/($locale).account_.activate.$id.$activationToken.jsx\");\n  import.meta.hot.lastModified = \"1702303141558.8833\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from '@shopify/remix-oxygen';\nimport { Form, useActionData } from '@remix-run/react';\n\n/**\n * @type {MetaFunction}\n */\nexport const meta = () => {\n  return [{\n    title: 'Activate Account'\n  }];\n};\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({\n  context\n}) {\n  if (await context.session.get('customerAccessToken')) {\n    return redirect('/account');\n  }\n  return json({});\n}\n\n/**\n * @param {ActionFunctionArgs}\n */\nexport async function action({\n  request,\n  context,\n  params\n}) {\n  const {\n    session,\n    storefront\n  } = context;\n  const {\n    id,\n    activationToken\n  } = params;\n  if (request.method !== 'POST') {\n    return json({\n      error: 'Method not allowed'\n    }, {\n      status: 405\n    });\n  }\n  try {\n    if (!id || !activationToken) {\n      throw new Error('Missing token. The link you followed might be wrong.');\n    }\n    const form = await request.formData();\n    const password = form.has('password') ? String(form.get('password')) : null;\n    const passwordConfirm = form.has('passwordConfirm') ? String(form.get('passwordConfirm')) : null;\n    const validPasswords = password && passwordConfirm && password === passwordConfirm;\n    if (!validPasswords) {\n      throw new Error('Passwords do not match');\n    }\n    const {\n      customerActivate\n    } = await storefront.mutate(CUSTOMER_ACTIVATE_MUTATION, {\n      variables: {\n        id: `gid://shopify/Customer/${id}`,\n        input: {\n          password,\n          activationToken\n        }\n      }\n    });\n    if (customerActivate?.customerUserErrors?.length) {\n      throw new Error(customerActivate.customerUserErrors[0].message);\n    }\n    const {\n      customerAccessToken\n    } = customerActivate ?? {};\n    if (!customerAccessToken) {\n      throw new Error('Could not activate account.');\n    }\n    session.set('customerAccessToken', customerAccessToken);\n    return redirect('/account', {\n      headers: {\n        'Set-Cookie': await session.commit()\n      }\n    });\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({\n        error: error.message\n      }, {\n        status: 400\n      });\n    }\n    return json({\n      error\n    }, {\n      status: 400\n    });\n  }\n}\nexport default function Activate() {\n  _s();\n  /** @type {ActionReturnData} */\n  const action = useActionData();\n  const error = action?.error ?? null;\n  return <div className=\"account-activate\">\n      <h1>Activate Account.</h1>\n      <p>Create your password to activate your account.</p>\n      <Form method=\"POST\">\n        <fieldset>\n          <label htmlFor=\"password\">Password</label>\n          <input id=\"password\" name=\"password\" type=\"password\" autoComplete=\"current-password\" placeholder=\"Password\" aria-label=\"Password\" minLength={8} required\n        // eslint-disable-next-line jsx-a11y/no-autofocus\n        autoFocus />\n          <label htmlFor=\"passwordConfirm\">Re-enter password</label>\n          <input id=\"passwordConfirm\" name=\"passwordConfirm\" type=\"password\" autoComplete=\"current-password\" placeholder=\"Re-enter password\" aria-label=\"Re-enter password\" minLength={8} required />\n        </fieldset>\n        {error ? <p>\n            <mark>\n              <small>{error}</small>\n            </mark>\n          </p> : <br />}\n        <button className=\"bg-primary text-contrast rounded py-2 px-4 focus:shadow-outline block w-full\" type=\"submit\">\n          Save\n        </button>\n      </Form>\n    </div>;\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customeractivate\n_s(Activate, \"YVzOeyDMt3QGe4z2+NJx3IYjE/U=\", false, function () {\n  return [useActionData];\n});\n_c = Activate;\nconst CUSTOMER_ACTIVATE_MUTATION = `#graphql\n  mutation customerActivate(\n    $id: ID!,\n    $input: CustomerActivateInput!,\n    $country: CountryCode,\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerActivate(id: $id, input: $input) {\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n/**\n * @typedef {{\n *   error: string | null;\n * }} ActionResponse\n */\n\n/** @typedef {import('@shopify/remix-oxygen').ActionFunctionArgs} ActionFunctionArgs */\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof action>} ActionReturnData */\nvar _c;\n$RefreshReg$(_c, \"Activate\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;AA8HM;AA7HN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,sEAAwE,EAAE;AAAA,EACnH;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAiE;AACjE,cAAY,IAAI,eAAe;AACjC;AASO,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,CAAC;AACH;AAyFe,SAAR,WAA4B;AACjC,KAAG;AAEH,QAAM,SAAS,cAAc;AAC7B,QAAM,QAAQ,QAAQ,SAAS;AAC/B,SAAO,mDAAC,SAAI,WAAU,oBAClB;AAAA,uDAAC,QAAG,iCAAJ;AAAA;AAAA;AAAA;AAAA,WAAqB;AAAA,IACrB,mDAAC,OAAE,8DAAH;AAAA;AAAA;AAAA;AAAA,WAAiD;AAAA,IACjD,mDAAC,QAAK,QAAO,QACX;AAAA,yDAAC,cACC;AAAA,2DAAC,WAAM,SAAQ,YAAW,wBAA1B;AAAA;AAAA;AAAA;AAAA,eAAkC;AAAA,QAClC;AAAA,UAAC;AAAA;AAAA,YAAM,IAAG;AAAA,YAAW,MAAK;AAAA,YAAW,MAAK;AAAA,YAAW,cAAa;AAAA,YAAmB,aAAY;AAAA,YAAW,cAAW;AAAA,YAAW,WAAW;AAAA,YAAG,UAAQ;AAAA,YAE1J,WAAS;AAAA;AAAA,UAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAEQ;AAAA,QACR,mDAAC,WAAM,SAAQ,mBAAkB,iCAAjC;AAAA;AAAA;AAAA;AAAA,eAAkD;AAAA,QAClD,mDAAC,WAAM,IAAG,mBAAkB,MAAK,mBAAkB,MAAK,YAAW,cAAa,oBAAmB,aAAY,qBAAoB,cAAW,qBAAoB,WAAW,GAAG,UAAQ,QAAxL;AAAA;AAAA;AAAA;AAAA,eAAyL;AAAA,WAN3L;AAAA;AAAA;AAAA;AAAA,aAOA;AAAA,MACC,QAAQ,mDAAC,OACN,6DAAC,UACC,6DAAC,WAAO,mBAAR;AAAA;AAAA;AAAA;AAAA,aAAc,KADhB;AAAA;AAAA;AAAA;AAAA,aAEA,KAHK;AAAA;AAAA;AAAA;AAAA,aAIP,IAAO,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,MACb,mDAAC,YAAO,WAAU,gFAA+E,MAAK,UAAS,oBAA/G;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAhBF;AAAA;AAAA;AAAA;AAAA,WAiBA;AAAA,OApBG;AAAA;AAAA;AAAA;AAAA,SAqBL;AACJ;AAGA,GAAG,UAAU,gCAAgC,OAAO,WAAY;AAC9D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AAiCL,IAAI;AACJ,aAAa,IAAI,UAAU;AAE3B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
