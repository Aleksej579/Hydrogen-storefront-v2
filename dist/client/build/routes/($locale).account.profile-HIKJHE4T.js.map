{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account.profile.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/($locale).account.profile.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/($locale).account.profile.jsx\");\n  import.meta.hot.lastModified = \"1702303141482.8848\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from '@shopify/remix-oxygen';\nimport { Form, useActionData, useNavigation, useOutletContext } from '@remix-run/react';\n\n/**\n * @type {MetaFunction}\n */\nexport const meta = () => {\n  return [{\n    title: 'Profile'\n  }];\n};\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({\n  context\n}) {\n  const customerAccessToken = await context.session.get('customerAccessToken');\n  if (!customerAccessToken) {\n    return redirect('/account/login');\n  }\n  return json({});\n}\n\n/**\n * @param {ActionFunctionArgs}\n */\nexport async function action({\n  request,\n  context\n}) {\n  const {\n    session,\n    storefront\n  } = context;\n  if (request.method !== 'PUT') {\n    return json({\n      error: 'Method not allowed'\n    }, {\n      status: 405\n    });\n  }\n  const form = await request.formData();\n  const customerAccessToken = await session.get('customerAccessToken');\n  if (!customerAccessToken) {\n    return json({\n      error: 'Unauthorized'\n    }, {\n      status: 401\n    });\n  }\n  try {\n    const password = getPassword(form);\n    const customer = {};\n    const validInputKeys = ['firstName', 'lastName', 'email', 'password', 'phone'];\n    for (const [key, value] of form.entries()) {\n      if (!validInputKeys.includes(key)) {\n        continue;\n      }\n      if (key === 'acceptsMarketing') {\n        customer.acceptsMarketing = value === 'on';\n      }\n      if (typeof value === 'string' && value.length) {\n        customer[key] = value;\n      }\n    }\n    if (password) {\n      customer.password = password;\n    }\n\n    // update customer and possibly password\n    const updated = await storefront.mutate(CUSTOMER_UPDATE_MUTATION, {\n      variables: {\n        customerAccessToken: customerAccessToken.accessToken,\n        customer\n      }\n    });\n\n    // check for mutation errors\n    if (updated.customerUpdate?.customerUserErrors?.length) {\n      return json({\n        error: updated.customerUpdate?.customerUserErrors[0]\n      }, {\n        status: 400\n      });\n    }\n\n    // update session with the updated access token\n    if (updated.customerUpdate?.customerAccessToken?.accessToken) {\n      session.set('customerAccessToken', updated.customerUpdate?.customerAccessToken);\n    }\n    return json({\n      error: null,\n      customer: updated.customerUpdate?.customer\n    }, {\n      headers: {\n        'Set-Cookie': await session.commit()\n      }\n    });\n  } catch (error) {\n    return json({\n      error: error.message,\n      customer: null\n    }, {\n      status: 400\n    });\n  }\n}\nexport default function AccountProfile() {\n  _s();\n  const account = useOutletContext();\n  const {\n    state\n  } = useNavigation();\n  /** @type {ActionReturnData} */\n  const action = useActionData();\n  const customer = action?.customer ?? account?.customer;\n  return <div className=\"account-profile\">\n      <h2>My profile</h2>\n      <br />\n      <Form method=\"PUT\">\n        <legend>Personal information</legend>\n        <fieldset>\n          <label htmlFor=\"firstName\">First name</label>\n          <input id=\"firstName\" name=\"firstName\" type=\"text\" autoComplete=\"given-name\" placeholder=\"First name\" aria-label=\"First name\" defaultValue={customer.firstName ?? ''} minLength={2} />\n          <label htmlFor=\"lastName\">Last name</label>\n          <input id=\"lastName\" name=\"lastName\" type=\"text\" autoComplete=\"family-name\" placeholder=\"Last name\" aria-label=\"Last name\" defaultValue={customer.lastName ?? ''} minLength={2} />\n          <label htmlFor=\"phone\">Mobile</label>\n          <input id=\"phone\" name=\"phone\" type=\"tel\" autoComplete=\"tel\" placeholder=\"Mobile\" aria-label=\"Mobile\" defaultValue={customer.phone ?? ''} />\n          <label htmlFor=\"email\">Email address</label>\n          <input id=\"email\" name=\"email\" type=\"email\" autoComplete=\"email\" required placeholder=\"Email address\" aria-label=\"Email address\" defaultValue={customer.email ?? ''} />\n          <div className=\"account-profile-marketing\">\n            <input id=\"acceptsMarketing\" name=\"acceptsMarketing\" type=\"checkbox\" placeholder=\"Accept marketing\" aria-label=\"Accept marketing\" defaultChecked={customer.acceptsMarketing} />\n            <label htmlFor=\"acceptsMarketing\">\n              &nbsp; Subscribed to marketing communications\n            </label>\n          </div>\n        </fieldset>\n        <br />\n        <legend>Change password (optional)</legend>\n        <fieldset>\n          <label htmlFor=\"currentPassword\">Current password</label>\n          <input id=\"currentPassword\" name=\"currentPassword\" type=\"password\" autoComplete=\"current-password\" placeholder=\"Current password\" aria-label=\"Current password\" minLength={8} />\n\n          <label htmlFor=\"newPassword\">New password</label>\n          <input id=\"newPassword\" name=\"newPassword\" type=\"password\" placeholder=\"New password\" aria-label=\"New password\" minLength={8} />\n\n          <label htmlFor=\"newPasswordConfirm\">New password (confirm)</label>\n          <input id=\"newPasswordConfirm\" name=\"newPasswordConfirm\" type=\"password\" placeholder=\"New password (confirm)\" aria-label=\"New password confirm\" minLength={8} />\n          <small>Passwords must be at least 8 characters.</small>\n        </fieldset>\n        {action?.error ? <p>\n            <mark>\n              <small>{action.error}</small>\n            </mark>\n          </p> : <br />}\n        <button type=\"submit\" disabled={state !== 'idle'}>\n          {state !== 'idle' ? 'Updating' : 'Update'}\n        </button>\n      </Form>\n    </div>;\n}\n\n/**\n * @param {FormData} form\n */\n_s(AccountProfile, \"ESq5n4UNxLQdC87RexB90ndxeMw=\", false, function () {\n  return [useOutletContext, useNavigation, useActionData];\n});\n_c = AccountProfile;\nfunction getPassword(form) {\n  let password;\n  const currentPassword = form.get('currentPassword');\n  const newPassword = form.get('newPassword');\n  const newPasswordConfirm = form.get('newPasswordConfirm');\n  let passwordError;\n  if (newPassword && !currentPassword) {\n    passwordError = new Error('Current password is required.');\n  }\n  if (newPassword && newPassword !== newPasswordConfirm) {\n    passwordError = new Error('New passwords must match.');\n  }\n  if (newPassword && currentPassword && newPassword === currentPassword) {\n    passwordError = new Error('New password must be different than current password.');\n  }\n  if (passwordError) {\n    throw passwordError;\n  }\n  if (currentPassword && newPassword) {\n    password = newPassword;\n  } else {\n    password = currentPassword;\n  }\n  return String(password);\n}\nconst CUSTOMER_UPDATE_MUTATION = `#graphql\n  # https://shopify.dev/docs/api/storefront/latest/mutations/customerUpdate\n  mutation customerUpdate(\n    $customerAccessToken: String!,\n    $customer: CustomerUpdateInput!\n    $country: CountryCode\n    $language: LanguageCode\n  ) @inContext(language: $language, country: $country) {\n    customerUpdate(customerAccessToken: $customerAccessToken, customer: $customer) {\n      customer {\n        acceptsMarketing\n        email\n        firstName\n        id\n        lastName\n        phone\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n/**\n * @typedef {{\n *   error: string | null;\n *   customer: CustomerFragment | null;\n * }} ActionResponse\n */\n\n/** @typedef {import('storefrontapi.generated').CustomerFragment} CustomerFragment */\n/** @typedef {import('@shopify/hydrogen/storefront-api-types').CustomerUpdateInput} CustomerUpdateInput */\n/** @typedef {import('@shopify/remix-oxygen').ActionFunctionArgs} ActionFunctionArgs */\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof action>} ActionReturnData */\nvar _c;\n$RefreshReg$(_c, \"AccountProfile\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
