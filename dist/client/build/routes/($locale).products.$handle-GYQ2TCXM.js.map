{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).products.$handle.jsx"],
  "sourcesContent": ["import {Suspense} from 'react';\nimport {defer, redirect} from '@shopify/remix-oxygen';\nimport {Await, Link, useLoaderData} from '@remix-run/react';\n\nimport {\n  Image,\n  Money,\n  VariantSelector,\n  getSelectedProductOptions,\n  CartForm,\n} from '@shopify/hydrogen';\nimport {getVariantUrl} from '~/utils';\n\n/**\n * @type {MetaFunction<typeof loader>}\n */\nexport const meta = ({data}) => {\n  return [{title: `Hydrogen | ${data?.product.title ?? ''}`}];\n};\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({params, request, context}) {\n  const {handle} = params;\n  const {storefront} = context;\n\n  const selectedOptions = getSelectedProductOptions(request).filter(\n    (option) =>\n      // Filter out Shopify predictive search query params\n      !option.name.startsWith('_sid') &&\n      !option.name.startsWith('_pos') &&\n      !option.name.startsWith('_psq') &&\n      !option.name.startsWith('_ss') &&\n      !option.name.startsWith('_v') &&\n      // Filter out third party tracking params\n      !option.name.startsWith('fbclid'),\n  );\n\n  if (!handle) {\n    throw new Error('Expected product handle to be defined');\n  }\n\n  // await the query for the critical product data\n  const {product} = await storefront.query(PRODUCT_QUERY, {\n    variables: {handle, selectedOptions},\n  });\n\n  if (!product?.id) {\n    throw new Response(null, {status: 404});\n  }\n\n  const firstVariant = product.variants.nodes[0];\n  const firstVariantIsDefault = Boolean(\n    firstVariant.selectedOptions.find(\n      (option) => option.name === 'Title' && option.value === 'Default Title',\n    ),\n  );\n\n  if (firstVariantIsDefault) {\n    product.selectedVariant = firstVariant;\n  } else {\n    // if no selected variant was returned from the selected options,\n    // we redirect to the first variant's url with it's selected options applied\n    if (!product.selectedVariant) {\n      throw redirectToFirstVariant({product, request});\n    }\n  }\n\n  // In order to show which variants are available in the UI, we need to query\n  // all of them. But there might be a *lot*, so instead separate the variants\n  // into it's own separate query that is deferred. So there's a brief moment\n  // where variant options might show as available when they're not, but after\n  // this deffered query resolves, the UI will update.\n  const variants = storefront.query(VARIANTS_QUERY, {\n    variables: {handle},\n  });\n\n  return defer({product, variants});\n}\n\n/**\n * @param {{\n *   product: ProductFragment;\n *   request: Request;\n * }}\n */\nfunction redirectToFirstVariant({product, request}) {\n  const url = new URL(request.url);\n  const firstVariant = product.variants.nodes[0];\n\n  return redirect(\n    getVariantUrl({\n      pathname: url.pathname,\n      handle: product.handle,\n      selectedOptions: firstVariant.selectedOptions,\n      searchParams: new URLSearchParams(url.search),\n    }),\n    {\n      status: 302,\n    },\n  );\n}\n\nexport default function Product() {\n  /** @type {LoaderReturnData} */\n  const {product, variants} = useLoaderData();\n  const {selectedVariant} = product;\n  return (\n    <div className=\"product\">\n      <ProductImage image={selectedVariant?.image} />\n      <ProductMain\n        selectedVariant={selectedVariant}\n        product={product}\n        variants={variants}\n      />\n    </div>\n  );\n}\n\n/**\n * @param {{image: ProductVariantFragment['image']}}\n */\nfunction ProductImage({image}) {\n  if (!image) {\n    return <div className=\"product-image\" />;\n  }\n  return (\n    <div className=\"product-image\">\n      <Image\n        alt={image.altText || 'Product Image'}\n        aspectRatio=\"1/1\"\n        data={image}\n        key={image.id}\n        sizes=\"(min-width: 45em) 50vw, 100vw\"\n      />\n    </div>\n  );\n}\n\n/**\n * @param {{\n *   product: ProductFragment;\n *   selectedVariant: ProductFragment['selectedVariant'];\n *   variants: Promise<ProductVariantsQuery>;\n * }}\n */\nfunction ProductMain({selectedVariant, product, variants}) {\n  const {title, descriptionHtml} = product;\n  return (\n    <div className=\"product-main\">\n      <h1>{title}</h1>\n      <ProductPrice selectedVariant={selectedVariant} />\n      <br />\n      <Suspense\n        fallback={\n          <ProductForm\n            product={product}\n            selectedVariant={selectedVariant}\n            variants={[]}\n          />\n        }\n      >\n        <Await\n          errorElement=\"There was a problem loading product variants\"\n          resolve={variants}\n        >\n          {(data) => (\n            <ProductForm\n              product={product}\n              selectedVariant={selectedVariant}\n              variants={data.product?.variants.nodes || []}\n            />\n          )}\n        </Await>\n      </Suspense>\n      <br />\n      <br />\n      <p>\n        <strong>Description</strong>\n      </p>\n      <br />\n      <div dangerouslySetInnerHTML={{__html: descriptionHtml}} />\n      <br />\n    </div>\n  );\n}\n\n/**\n * @param {{\n *   selectedVariant: ProductFragment['selectedVariant'];\n * }}\n */\nfunction ProductPrice({selectedVariant}) {\n  return (\n    <div className=\"product-price\">\n      {selectedVariant?.compareAtPrice ? (\n        <>\n          <p>Sale</p>\n          <br />\n          <div className=\"product-price-on-sale\">\n            {selectedVariant ? <Money data={selectedVariant.price} /> : null}\n            <s>\n              <Money data={selectedVariant.compareAtPrice} />\n            </s>\n          </div>\n        </>\n      ) : (\n        selectedVariant?.price && <Money data={selectedVariant?.price} />\n      )}\n    </div>\n  );\n}\n\n/**\n * @param {{\n *   product: ProductFragment;\n *   selectedVariant: ProductFragment['selectedVariant'];\n *   variants: Array<ProductVariantFragment>;\n * }}\n */\nfunction ProductForm({product, selectedVariant, variants}) {\n  return (\n    <div className=\"product-form\">\n      <VariantSelector\n        handle={product.handle}\n        options={product.options}\n        variants={variants}\n      >\n        {({option}) => <ProductOptions key={option.name} option={option} />}\n      </VariantSelector>\n      <br />\n      <AddToCartButton\n        disabled={!selectedVariant || !selectedVariant.availableForSale}\n        onClick={() => {\n          window.location.href = window.location.href + '#cart-aside';\n        }}\n        lines={\n          selectedVariant\n            ? [\n                {\n                  merchandiseId: selectedVariant.id,\n                  quantity: 1,\n                },\n              ]\n            : []\n        }\n      >\n        {selectedVariant?.availableForSale ? 'Add to cart' : 'Sold out'}\n      </AddToCartButton>\n    </div>\n  );\n}\n\n/**\n * @param {{option: VariantOption}}\n */\nfunction ProductOptions({option}) {\n  return (\n    <div className=\"product-options\" key={option.name}>\n      <h5>{option.name}</h5>\n      <div className=\"product-options-grid\">\n        {option.values.map(({value, isAvailable, isActive, to}) => {\n          return (\n            <Link\n              className=\"product-options-item\"\n              key={option.name + value}\n              prefetch=\"intent\"\n              preventScrollReset\n              replace\n              to={to}\n              style={{\n                border: isActive ? '1px solid black' : '1px solid transparent',\n                opacity: isAvailable ? 1 : 0.3,\n              }}\n            >\n              {value}\n            </Link>\n          );\n        })}\n      </div>\n      <br />\n    </div>\n  );\n}\n\n/**\n * @param {{\n *   analytics?: unknown;\n *   children: React.ReactNode;\n *   disabled?: boolean;\n *   lines: CartLineInput[];\n *   onClick?: () => void;\n * }}\n */\nfunction AddToCartButton({analytics, children, disabled, lines, onClick}) {\n  return (\n    <CartForm route=\"/cart\" inputs={{lines}} action={CartForm.ACTIONS.LinesAdd}>\n      {(fetcher) => (\n        <>\n          <input\n            name=\"analytics\"\n            type=\"hidden\"\n            value={JSON.stringify(analytics)}\n          />\n          <button\n            type=\"submit\"\n            onClick={onClick}\n            disabled={disabled ?? fetcher.state !== 'idle'}\n          >\n            {children}\n          </button>\n        </>\n      )}\n    </CartForm>\n  );\n}\n\nconst PRODUCT_VARIANT_FRAGMENT = `#graphql\n  fragment ProductVariant on ProductVariant {\n    availableForSale\n    compareAtPrice {\n      amount\n      currencyCode\n    }\n    id\n    image {\n      __typename\n      id\n      url\n      altText\n      width\n      height\n    }\n    price {\n      amount\n      currencyCode\n    }\n    product {\n      title\n      handle\n    }\n    selectedOptions {\n      name\n      value\n    }\n    sku\n    title\n    unitPrice {\n      amount\n      currencyCode\n    }\n  }\n`;\n\nconst PRODUCT_FRAGMENT = `#graphql\n  fragment Product on Product {\n    id\n    title\n    vendor\n    handle\n    descriptionHtml\n    description\n    options {\n      name\n      values\n    }\n    selectedVariant: variantBySelectedOptions(selectedOptions: $selectedOptions) {\n      ...ProductVariant\n    }\n    variants(first: 1) {\n      nodes {\n        ...ProductVariant\n      }\n    }\n    seo {\n      description\n      title\n    }\n  }\n  ${PRODUCT_VARIANT_FRAGMENT}\n`;\n\nconst PRODUCT_QUERY = `#graphql\n  query Product(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n    $selectedOptions: [SelectedOptionInput!]!\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      ...Product\n    }\n  }\n  ${PRODUCT_FRAGMENT}\n`;\n\nconst PRODUCT_VARIANTS_FRAGMENT = `#graphql\n  fragment ProductVariants on Product {\n    variants(first: 250) {\n      nodes {\n        ...ProductVariant\n      }\n    }\n  }\n  ${PRODUCT_VARIANT_FRAGMENT}\n`;\n\nconst VARIANTS_QUERY = `#graphql\n  ${PRODUCT_VARIANTS_FRAGMENT}\n  query ProductVariants(\n    $country: CountryCode\n    $language: LanguageCode\n    $handle: String!\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      ...ProductVariants\n    }\n  }\n`;\n\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('@remix-run/react').FetcherWithComponents} FetcherWithComponents */\n/** @typedef {import('storefrontapi.generated').ProductFragment} ProductFragment */\n/** @typedef {import('storefrontapi.generated').ProductVariantsQuery} ProductVariantsQuery */\n/** @typedef {import('storefrontapi.generated').ProductVariantFragment} ProductVariantFragment */\n/** @typedef {import('@shopify/hydrogen').VariantOption} VariantOption */\n/** @typedef {import('@shopify/hydrogen/storefront-api-types').CartLineInput} CartLineInput */\n/** @typedef {import('@shopify/hydrogen/storefront-api-types').SelectedOption} SelectedOption */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_runtime", "meta", "data", "Product", "product", "variants", "useLoaderData", "selectedVariant", "ProductImage", "ProductMain", "image", "Image", "title", "descriptionHtml", "ProductPrice", "ProductForm", "Await", "data", "Money", "$r", "option", "ProductOptions", "AddToCartButton", "value", "isAvailable", "isActive", "to", "Link", "analytics", "children", "disabled", "lines", "onClick", "ee", "fetcher", "PRODUCT_VARIANT_FRAGMENT", "PRODUCT_FRAGMENT", "PRODUCT_QUERY", "PRODUCT_VARIANTS_FRAGMENT", "VARIANTS_QUERY"]
}
