{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).search.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/($locale).search.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/($locale).search.jsx\");\n  import.meta.hot.lastModified = \"1702303141718.8796\";\n}\n// REMIX HMR END\n\nimport { defer } from '@shopify/remix-oxygen';\nimport { useLoaderData } from '@remix-run/react';\nimport { getPaginationVariables } from '@shopify/hydrogen';\nimport { SearchForm, SearchResults, NoSearchResults } from '~/components/Search';\n\n/**\n * @type {MetaFunction}\n */\nexport const meta = () => {\n  return [{\n    title: `Hydrogen | Search`\n  }];\n};\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({\n  request,\n  context\n}) {\n  const url = new URL(request.url);\n  const searchParams = new URLSearchParams(url.search);\n  const variables = getPaginationVariables(request, {\n    pageBy: 8\n  });\n  const searchTerm = String(searchParams.get('q') || '');\n  if (!searchTerm) {\n    return {\n      searchResults: {\n        results: null,\n        totalResults: 0\n      },\n      searchTerm\n    };\n  }\n  const data = await context.storefront.query(SEARCH_QUERY, {\n    variables: {\n      query: searchTerm,\n      ...variables\n    }\n  });\n  if (!data) {\n    throw new Error('No search data returned from Shopify API');\n  }\n  const totalResults = Object.values(data).reduce((total, value) => {\n    return total + value.nodes.length;\n  }, 0);\n  const searchResults = {\n    results: data,\n    totalResults\n  };\n  return defer({\n    searchTerm,\n    searchResults\n  });\n}\nexport default function SearchPage() {\n  _s();\n  /** @type {LoaderReturnData} */\n  const {\n    searchTerm,\n    searchResults\n  } = useLoaderData();\n  return <div className=\"search\">\n      <h1>Search</h1>\n      <SearchForm searchTerm={searchTerm} />\n      {!searchTerm || !searchResults.totalResults ? <NoSearchResults /> : <SearchResults results={searchResults.results} />}\n    </div>;\n}\n_s(SearchPage, \"055hEQUIgKujYDDIKNnKGREITpA=\", false, function () {\n  return [useLoaderData];\n});\n_c = SearchPage;\nconst SEARCH_QUERY = `#graphql\n  fragment SearchProduct on Product {\n    __typename\n    handle\n    id\n    publishedAt\n    title\n    trackingParameters\n    vendor\n    variants(first: 1) {\n      nodes {\n        id\n        image {\n          url\n          altText\n          width\n          height\n        }\n        price {\n          amount\n          currencyCode\n        }\n        compareAtPrice {\n          amount\n          currencyCode\n        }\n        selectedOptions {\n          name\n          value\n        }\n        product {\n          handle\n          title\n        }\n      }\n    }\n  }\n  fragment SearchPage on Page {\n     __typename\n     handle\n    id\n    title\n    trackingParameters\n  }\n  fragment SearchArticle on Article {\n    __typename\n    handle\n    id\n    title\n    trackingParameters\n  }\n  query search(\n    $country: CountryCode\n    $endCursor: String\n    $first: Int\n    $language: LanguageCode\n    $last: Int\n    $query: String!\n    $startCursor: String\n  ) @inContext(country: $country, language: $language) {\n    products: search(\n      query: $query,\n      unavailableProducts: HIDE,\n      types: [PRODUCT],\n      first: $first,\n      sortKey: RELEVANCE,\n      last: $last,\n      before: $startCursor,\n      after: $endCursor\n    ) {\n      nodes {\n        ...on Product {\n          ...SearchProduct\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n    pages: search(\n      query: $query,\n      types: [PAGE],\n      first: 10\n    ) {\n      nodes {\n        ...on Page {\n          ...SearchPage\n        }\n      }\n    }\n    articles: search(\n      query: $query,\n      types: [ARTICLE],\n      first: 10\n    ) {\n      nodes {\n        ...on Article {\n          ...SearchArticle\n        }\n      }\n    }\n  }\n`;\n\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\nvar _c;\n$RefreshReg$(_c, \"SearchPage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAsFM;AArFN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,sCAAwC,EAAE;AAAA,EACnF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAiC;AACjC,cAAY,IAAI,eAAe;AACjC;AAWO,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,CAAC;AACH;AA6Ce,SAAR,aAA8B;AACnC,KAAG;AAEH,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF,IAAI,cAAc;AAClB,SAAO,mDAAC,SAAI,WAAU,UAClB;AAAA,uDAAC,QAAG,sBAAJ;AAAA;AAAA;AAAA;AAAA,WAAU;AAAA,IACV,mDAAC,cAAW,cAAZ;AAAA;AAAA;AAAA;AAAA,WAAoC;AAAA,IACnC,CAAC,cAAc,CAAC,cAAc,eAAe,mDAAC,qBAAD;AAAA;AAAA;AAAA;AAAA,WAAiB,IAAK,mDAAC,iBAAc,SAAS,cAAc,WAAtC;AAAA;AAAA;AAAA;AAAA,WAA+C;AAAA,OAHhH;AAAA;AAAA;AAAA;AAAA,SAIL;AACJ;AACA,GAAG,YAAY,gCAAgC,OAAO,WAAY;AAChE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AA+GL,IAAI;AACJ,aAAa,IAAI,YAAY;AAE7B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
