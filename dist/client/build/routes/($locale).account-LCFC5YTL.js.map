{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account.jsx"],
  "sourcesContent": ["import {Form, NavLink, Outlet, useLoaderData} from '@remix-run/react';\nimport {json, redirect} from '@shopify/remix-oxygen';\n\nexport function shouldRevalidate() {\n  return true;\n}\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({request, context}) {\n  const {session, storefront} = context;\n  const {pathname} = new URL(request.url);\n  const customerAccessToken = await session.get('customerAccessToken');\n  const isLoggedIn = !!customerAccessToken?.accessToken;\n  const isAccountHome = pathname === '/account' || pathname === '/account/';\n  const isPrivateRoute =\n    /^\\/account\\/(orders|orders\\/.*|profile|addresses|addresses\\/.*)$/.test(\n      pathname,\n    );\n\n  if (!isLoggedIn) {\n    if (isPrivateRoute || isAccountHome) {\n      session.unset('customerAccessToken');\n      return redirect('/account/login', {\n        headers: {\n          'Set-Cookie': await session.commit(),\n        },\n      });\n    } else {\n      // public subroute such as /account/login...\n      return json({\n        isLoggedIn: false,\n        isAccountHome,\n        isPrivateRoute,\n        customer: null,\n      });\n    }\n  } else {\n    // loggedIn, default redirect to the orders page\n    if (isAccountHome) {\n      return redirect('/account/orders');\n    }\n  }\n\n  try {\n    const {customer} = await storefront.query(CUSTOMER_QUERY, {\n      variables: {\n        customerAccessToken: customerAccessToken.accessToken,\n        country: storefront.i18n.country,\n        language: storefront.i18n.language,\n      },\n      cache: storefront.CacheNone(),\n    });\n\n    if (!customer) {\n      throw new Error('Customer not found');\n    }\n\n    return json(\n      {isLoggedIn, isPrivateRoute, isAccountHome, customer},\n      {\n        headers: {\n          'Cache-Control': 'no-cache, no-store, must-revalidate',\n        },\n      },\n    );\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('There was a problem loading account', error);\n    session.unset('customerAccessToken');\n    return redirect('/account/login', {\n      headers: {\n        'Set-Cookie': await session.commit(),\n      },\n    });\n  }\n}\n\nexport default function Acccount() {\n  /** @type {LoaderReturnData} */\n  const {customer, isPrivateRoute, isAccountHome} = useLoaderData();\n\n  if (!isPrivateRoute && !isAccountHome) {\n    return <Outlet context={{customer}} />;\n  }\n\n  return (\n    <AccountLayout customer={customer}>\n      <br />\n      <br />\n      <Outlet context={{customer}} />\n    </AccountLayout>\n  );\n}\n\n/**\n * @param {{\n *   customer: CustomerFragment;\n *   children: React.ReactNode;\n * }}\n */\nfunction AccountLayout({customer, children}) {\n  const heading = customer\n    ? customer.firstName\n      ? `Welcome, ${customer.firstName}`\n      : `Welcome to your account.`\n    : 'Account Details';\n\n  return (\n    <div className=\"account\">\n      <h1>{heading}</h1>\n      <br />\n      <AccountMenu />\n      {children}\n    </div>\n  );\n}\n\nfunction AccountMenu() {\n  function isActiveStyle({isActive, isPending}) {\n    return {\n      fontWeight: isActive ? 'bold' : undefined,\n      color: isPending ? 'grey' : 'black',\n    };\n  }\n\n  return (\n    <nav role=\"navigation\">\n      <NavLink to=\"/account/orders\" style={isActiveStyle}>\n        Orders &nbsp;\n      </NavLink>\n      &nbsp;|&nbsp;\n      <NavLink to=\"/account/profile\" style={isActiveStyle}>\n        &nbsp; Profile &nbsp;\n      </NavLink>\n      &nbsp;|&nbsp;\n      <NavLink to=\"/account/addresses\" style={isActiveStyle}>\n        &nbsp; Addresses &nbsp;\n      </NavLink>\n      &nbsp;|&nbsp;\n      <Logout />\n    </nav>\n  );\n}\n\nfunction Logout() {\n  return (\n    <Form className=\"account-logout\" method=\"POST\" action=\"/account/logout\">\n      &nbsp;<button type=\"submit\">Sign out</button>\n    </Form>\n  );\n}\n\nexport const CUSTOMER_FRAGMENT = `#graphql\n  fragment Customer on Customer {\n    acceptsMarketing\n    addresses(first: 6) {\n      nodes {\n        ...Address\n      }\n    }\n    defaultAddress {\n      ...Address\n    }\n    email\n    firstName\n    lastName\n    numberOfOrders\n    phone\n  }\n  fragment Address on MailingAddress {\n    id\n    formatted\n    firstName\n    lastName\n    company\n    address1\n    address2\n    country\n    province\n    city\n    zip\n    phone\n  }\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/queries/customer\nconst CUSTOMER_QUERY = `#graphql\n  query Customer(\n    $customerAccessToken: String!\n    $country: CountryCode\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customer(customerAccessToken: $customerAccessToken) {\n      ...Customer\n    }\n  }\n  ${CUSTOMER_FRAGMENT}\n`;\n\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @typedef {import('storefrontapi.generated').CustomerFragment} CustomerFragment */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n"],
  "mappings": "iIAoFW,IAAAA,EAAA,OAjFJ,SAASC,GAAmB,CACjC,MAAO,EACT,CA0Ee,SAARC,GAA4B,CAEjC,GAAM,CAAC,SAAAC,EAAU,eAAAC,EAAgB,cAAAC,CAAa,EAAIC,EAAc,EAEhE,MAAI,CAACF,GAAkB,CAACC,KACf,OAACE,EAAA,CAAO,QAAS,CAAC,SAAAJ,CAAQ,EAAG,KAIpC,QAACK,EAAA,CAAc,SAAUL,EACvB,oBAAC,OAAG,KACJ,OAAC,OAAG,KACJ,OAACI,EAAA,CAAO,QAAS,CAAC,SAAAJ,CAAQ,EAAG,GAC/B,CAEJ,CAQA,SAASK,EAAc,CAAC,SAAAL,EAAU,SAAAM,CAAQ,EAAG,CAC3C,IAAMC,EAAUP,EACZA,EAAS,UACP,YAAYA,EAAS,YACrB,2BACF,kBAEJ,SACE,QAAC,OAAI,UAAU,UACb,oBAAC,MAAI,SAAAO,EAAQ,KACb,OAAC,OAAG,KACJ,OAACC,EAAA,EAAY,EACZF,GACH,CAEJ,CAEA,SAASE,GAAc,CACrB,SAASC,EAAc,CAAC,SAAAC,EAAU,UAAAC,CAAS,EAAG,CAC5C,MAAO,CACL,WAAYD,EAAW,OAAS,OAChC,MAAOC,EAAY,OAAS,OAC9B,CACF,CAEA,SACE,QAAC,OAAI,KAAK,aACR,oBAACC,EAAA,CAAQ,GAAG,kBAAkB,MAAOH,EAAe,uBAEpD,EAAU,eAEV,OAACG,EAAA,CAAQ,GAAG,mBAAmB,MAAOH,EAAe,6BAErD,EAAU,eAEV,OAACG,EAAA,CAAQ,GAAG,qBAAqB,MAAOH,EAAe,+BAEvD,EAAU,eAEV,OAACI,EAAA,EAAO,GACV,CAEJ,CAEA,SAASA,GAAS,CAChB,SACE,QAACC,EAAA,CAAK,UAAU,iBAAiB,OAAO,OAAO,OAAO,kBAAkB,oBAChE,OAAC,UAAO,KAAK,SAAS,oBAAQ,GACtC,CAEJ,CAEO,IAAMC,EAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkC3BC,EAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUnBD;",
  "names": ["import_jsx_runtime", "shouldRevalidate", "Acccount", "customer", "isPrivateRoute", "isAccountHome", "useLoaderData", "Outlet", "AccountLayout", "children", "heading", "AccountMenu", "isActiveStyle", "isActive", "isPending", "NavLink", "Logout", "Form", "CUSTOMER_FRAGMENT", "CUSTOMER_QUERY"]
}
