{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account.addresses.jsx"],
  "sourcesContent": ["import {json, redirect} from '@shopify/remix-oxygen';\nimport {\n  Form,\n  useActionData,\n  useNavigation,\n  useOutletContext,\n} from '@remix-run/react';\n\n/**\n * @type {MetaFunction}\n */\nexport const meta = () => {\n  return [{title: 'Addresses'}];\n};\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({context}) {\n  const {session} = context;\n  const customerAccessToken = await session.get('customerAccessToken');\n  if (!customerAccessToken) {\n    return redirect('/account/login');\n  }\n  return json({});\n}\n\n/**\n * @param {ActionFunctionArgs}\n */\nexport async function action({request, context}) {\n  const {storefront, session} = context;\n\n  try {\n    const form = await request.formData();\n\n    const addressId = form.has('addressId')\n      ? String(form.get('addressId'))\n      : null;\n    if (!addressId) {\n      throw new Error('You must provide an address id.');\n    }\n\n    const customerAccessToken = await session.get('customerAccessToken');\n    if (!customerAccessToken) {\n      return json({error: {[addressId]: 'Unauthorized'}}, {status: 401});\n    }\n    const {accessToken} = customerAccessToken;\n\n    const defaultAddress = form.has('defaultAddress')\n      ? String(form.get('defaultAddress')) === 'on'\n      : null;\n    const address = {};\n    const keys = [\n      'address1',\n      'address2',\n      'city',\n      'company',\n      'country',\n      'firstName',\n      'lastName',\n      'phone',\n      'province',\n      'zip',\n    ];\n\n    for (const key of keys) {\n      const value = form.get(key);\n      if (typeof value === 'string') {\n        address[key] = value;\n      }\n    }\n\n    switch (request.method) {\n      case 'POST': {\n        // handle new address creation\n        try {\n          const {customerAddressCreate} = await storefront.mutate(\n            CREATE_ADDRESS_MUTATION,\n            {\n              variables: {customerAccessToken: accessToken, address},\n            },\n          );\n\n          if (customerAddressCreate?.customerUserErrors?.length) {\n            const error = customerAddressCreate.customerUserErrors[0];\n            throw new Error(error.message);\n          }\n\n          const createdAddress = customerAddressCreate?.customerAddress;\n          if (!createdAddress?.id) {\n            throw new Error(\n              'Expected customer address to be created, but the id is missing',\n            );\n          }\n\n          if (defaultAddress) {\n            const createdAddressId = decodeURIComponent(createdAddress.id);\n            const {customerDefaultAddressUpdate} = await storefront.mutate(\n              UPDATE_DEFAULT_ADDRESS_MUTATION,\n              {\n                variables: {\n                  customerAccessToken: accessToken,\n                  addressId: createdAddressId,\n                },\n              },\n            );\n\n            if (customerDefaultAddressUpdate?.customerUserErrors?.length) {\n              const error = customerDefaultAddressUpdate.customerUserErrors[0];\n              throw new Error(error.message);\n            }\n          }\n\n          return json({error: null, createdAddress, defaultAddress});\n        } catch (error) {\n          if (error instanceof Error) {\n            return json({error: {[addressId]: error.message}}, {status: 400});\n          }\n          return json({error: {[addressId]: error}}, {status: 400});\n        }\n      }\n\n      case 'PUT': {\n        // handle address updates\n        try {\n          const {customerAddressUpdate} = await storefront.mutate(\n            UPDATE_ADDRESS_MUTATION,\n            {\n              variables: {\n                address,\n                customerAccessToken: accessToken,\n                id: decodeURIComponent(addressId),\n              },\n            },\n          );\n\n          const updatedAddress = customerAddressUpdate?.customerAddress;\n\n          if (customerAddressUpdate?.customerUserErrors?.length) {\n            const error = customerAddressUpdate.customerUserErrors[0];\n            throw new Error(error.message);\n          }\n\n          if (defaultAddress) {\n            const {customerDefaultAddressUpdate} = await storefront.mutate(\n              UPDATE_DEFAULT_ADDRESS_MUTATION,\n              {\n                variables: {\n                  customerAccessToken: accessToken,\n                  addressId: decodeURIComponent(addressId),\n                },\n              },\n            );\n\n            if (customerDefaultAddressUpdate?.customerUserErrors?.length) {\n              const error = customerDefaultAddressUpdate.customerUserErrors[0];\n              throw new Error(error.message);\n            }\n          }\n\n          return json({error: null, updatedAddress, defaultAddress});\n        } catch (error) {\n          if (error instanceof Error) {\n            return json({error: {[addressId]: error.message}}, {status: 400});\n          }\n          return json({error: {[addressId]: error}}, {status: 400});\n        }\n      }\n\n      case 'DELETE': {\n        // handles address deletion\n        try {\n          const {customerAddressDelete} = await storefront.mutate(\n            DELETE_ADDRESS_MUTATION,\n            {\n              variables: {customerAccessToken: accessToken, id: addressId},\n            },\n          );\n\n          if (customerAddressDelete?.customerUserErrors?.length) {\n            const error = customerAddressDelete.customerUserErrors[0];\n            throw new Error(error.message);\n          }\n          return json({error: null, deletedAddress: addressId});\n        } catch (error) {\n          if (error instanceof Error) {\n            return json({error: {[addressId]: error.message}}, {status: 400});\n          }\n          return json({error: {[addressId]: error}}, {status: 400});\n        }\n      }\n\n      default: {\n        return json(\n          {error: {[addressId]: 'Method not allowed'}},\n          {status: 405},\n        );\n      }\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({error: error.message}, {status: 400});\n    }\n    return json({error}, {status: 400});\n  }\n}\n\nexport default function Addresses() {\n  const {customer} = useOutletContext();\n  const {defaultAddress, addresses} = customer;\n\n  return (\n    <div className=\"account-addresses\">\n      <h2>Addresses</h2>\n      <br />\n      {!addresses.nodes.length ? (\n        <p>You have no addresses saved.</p>\n      ) : (\n        <div>\n          <div>\n            <legend>Create address</legend>\n            <NewAddressForm />\n          </div>\n          <br />\n          <hr />\n          <br />\n          <ExistingAddresses\n            addresses={addresses}\n            defaultAddress={defaultAddress}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction NewAddressForm() {\n  const newAddress = {\n    address1: '',\n    address2: '',\n    city: '',\n    company: '',\n    country: '',\n    firstName: '',\n    id: 'new',\n    lastName: '',\n    phone: '',\n    province: '',\n    zip: '',\n  };\n\n  return (\n    <AddressForm address={newAddress} defaultAddress={null}>\n      {({stateForMethod}) => (\n        <div>\n          <button\n            disabled={stateForMethod('POST') !== 'idle'}\n            formMethod=\"POST\"\n            type=\"submit\"\n          >\n            {stateForMethod('POST') !== 'idle' ? 'Creating' : 'Create'}\n          </button>\n        </div>\n      )}\n    </AddressForm>\n  );\n}\n\n/**\n * @param {Pick<CustomerFragment, 'addresses' | 'defaultAddress'>}\n */\nfunction ExistingAddresses({addresses, defaultAddress}) {\n  return (\n    <div>\n      <legend>Existing addresses</legend>\n      {addresses.nodes.map((address) => (\n        <AddressForm\n          key={address.id}\n          address={address}\n          defaultAddress={defaultAddress}\n        >\n          {({stateForMethod}) => (\n            <div>\n              <button\n                disabled={stateForMethod('PUT') !== 'idle'}\n                formMethod=\"PUT\"\n                type=\"submit\"\n              >\n                {stateForMethod('PUT') !== 'idle' ? 'Saving' : 'Save'}\n              </button>\n              <button\n                disabled={stateForMethod('DELETE') !== 'idle'}\n                formMethod=\"DELETE\"\n                type=\"submit\"\n              >\n                {stateForMethod('DELETE') !== 'idle' ? 'Deleting' : 'Delete'}\n              </button>\n            </div>\n          )}\n        </AddressForm>\n      ))}\n    </div>\n  );\n}\n\n/**\n * @param {Class<useNavigation>['state']>}\n */\nexport function AddressForm({address, defaultAddress, children}) {\n  const {state, formMethod} = useNavigation();\n  /** @type {ActionReturnData} */\n  const action = useActionData();\n  const error = action?.error?.[address.id];\n  const isDefaultAddress = defaultAddress?.id === address.id;\n  return (\n    <Form id={address.id}>\n      <fieldset>\n        <input type=\"hidden\" name=\"addressId\" defaultValue={address.id} />\n        <label htmlFor=\"firstName\">First name*</label>\n        <input\n          aria-label=\"First name\"\n          autoComplete=\"given-name\"\n          defaultValue={address?.firstName ?? ''}\n          id=\"firstName\"\n          name=\"firstName\"\n          placeholder=\"First name\"\n          required\n          type=\"text\"\n        />\n        <label htmlFor=\"lastName\">Last name*</label>\n        <input\n          aria-label=\"Last name\"\n          autoComplete=\"family-name\"\n          defaultValue={address?.lastName ?? ''}\n          id=\"lastName\"\n          name=\"lastName\"\n          placeholder=\"Last name\"\n          required\n          type=\"text\"\n        />\n        <label htmlFor=\"company\">Company</label>\n        <input\n          aria-label=\"Company\"\n          autoComplete=\"organization\"\n          defaultValue={address?.company ?? ''}\n          id=\"company\"\n          name=\"company\"\n          placeholder=\"Company\"\n          type=\"text\"\n        />\n        <label htmlFor=\"address1\">Address line*</label>\n        <input\n          aria-label=\"Address line 1\"\n          autoComplete=\"address-line1\"\n          defaultValue={address?.address1 ?? ''}\n          id=\"address1\"\n          name=\"address1\"\n          placeholder=\"Address line 1*\"\n          required\n          type=\"text\"\n        />\n        <label htmlFor=\"address2\">Address line 2</label>\n        <input\n          aria-label=\"Address line 2\"\n          autoComplete=\"address-line2\"\n          defaultValue={address?.address2 ?? ''}\n          id=\"address2\"\n          name=\"address2\"\n          placeholder=\"Address line 2\"\n          type=\"text\"\n        />\n        <label htmlFor=\"city\">City*</label>\n        <input\n          aria-label=\"City\"\n          autoComplete=\"address-level2\"\n          defaultValue={address?.city ?? ''}\n          id=\"city\"\n          name=\"city\"\n          placeholder=\"City\"\n          required\n          type=\"text\"\n        />\n        <label htmlFor=\"province\">State / Province*</label>\n        <input\n          aria-label=\"State\"\n          autoComplete=\"address-level1\"\n          defaultValue={address?.province ?? ''}\n          id=\"province\"\n          name=\"province\"\n          placeholder=\"State / Province\"\n          required\n          type=\"text\"\n        />\n        <label htmlFor=\"zip\">Zip / Postal Code*</label>\n        <input\n          aria-label=\"Zip\"\n          autoComplete=\"postal-code\"\n          defaultValue={address?.zip ?? ''}\n          id=\"zip\"\n          name=\"zip\"\n          placeholder=\"Zip / Postal Code\"\n          required\n          type=\"text\"\n        />\n        <label htmlFor=\"country\">Country*</label>\n        <input\n          aria-label=\"Country\"\n          autoComplete=\"country-name\"\n          defaultValue={address?.country ?? ''}\n          id=\"country\"\n          name=\"country\"\n          placeholder=\"Country\"\n          required\n          type=\"text\"\n        />\n        <label htmlFor=\"phone\">Phone</label>\n        <input\n          aria-label=\"Phone\"\n          autoComplete=\"tel\"\n          defaultValue={address?.phone ?? ''}\n          id=\"phone\"\n          name=\"phone\"\n          placeholder=\"+16135551111\"\n          pattern=\"^\\+?[1-9]\\d{3,14}$\"\n          type=\"tel\"\n        />\n        <div>\n          <input\n            defaultChecked={isDefaultAddress}\n            id=\"defaultAddress\"\n            name=\"defaultAddress\"\n            type=\"checkbox\"\n          />\n          <label htmlFor=\"defaultAddress\">Set as default address</label>\n        </div>\n        {error ? (\n          <p>\n            <mark>\n              <small>{error}</small>\n            </mark>\n          </p>\n        ) : (\n          <br />\n        )}\n        {children({\n          stateForMethod: (method) => (formMethod === method ? state : 'idle'),\n        })}\n      </fieldset>\n    </Form>\n  );\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/2023-04/mutations/customeraddressupdate\nconst UPDATE_ADDRESS_MUTATION = `#graphql\n  mutation customerAddressUpdate(\n    $address: MailingAddressInput!\n    $customerAccessToken: String!\n    $id: ID!\n    $country: CountryCode\n    $language: LanguageCode\n ) @inContext(country: $country, language: $language) {\n    customerAddressUpdate(\n      address: $address\n      customerAccessToken: $customerAccessToken\n      id: $id\n    ) {\n      customerAddress {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customerAddressDelete\nconst DELETE_ADDRESS_MUTATION = `#graphql\n  mutation customerAddressDelete(\n    $customerAccessToken: String!,\n    $id: ID!,\n    $country: CountryCode,\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerAddressDelete(customerAccessToken: $customerAccessToken, id: $id) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      deletedCustomerAddressId\n    }\n  }\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customerdefaultaddressupdate\nconst UPDATE_DEFAULT_ADDRESS_MUTATION = `#graphql\n  mutation customerDefaultAddressUpdate(\n    $addressId: ID!\n    $customerAccessToken: String!\n    $country: CountryCode\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerDefaultAddressUpdate(\n      addressId: $addressId\n      customerAccessToken: $customerAccessToken\n    ) {\n      customer {\n        defaultAddress {\n          id\n        }\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customeraddresscreate\nconst CREATE_ADDRESS_MUTATION = `#graphql\n  mutation customerAddressCreate(\n    $address: MailingAddressInput!\n    $customerAccessToken: String!\n    $country: CountryCode\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerAddressCreate(\n      address: $address\n      customerAccessToken: $customerAccessToken\n    ) {\n      customerAddress {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n/**\n * @typedef {{\n *   addressId?: string | null;\n *   createdAddress?: AddressFragment;\n *   defaultAddress?: string | null;\n *   deletedAddress?: string | null;\n *   error: Record<AddressFragment['id'], string> | null;\n *   updatedAddress?: AddressFragment;\n * }} ActionResponse\n */\n\n/** @typedef {import('@shopify/hydrogen/storefront-api-types').MailingAddressInput} MailingAddressInput */\n/** @typedef {import('storefrontapi.generated').AddressFragment} AddressFragment */\n/** @typedef {import('storefrontapi.generated').CustomerFragment} CustomerFragment */\n/** @typedef {import('@shopify/remix-oxygen').ActionFunctionArgs} ActionFunctionArgs */\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof action>} ActionReturnData */\n"],
  "mappings": "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",
  "names": ["import_jsx_runtime", "meta", "Addresses", "customer", "useOutletContext", "defaultAddress", "addresses", "NewAddressForm", "ExistingAddresses", "AddressForm", "stateForMethod", "address", "children", "state", "formMethod", "useNavigation", "error", "useActionData", "isDefaultAddress", "Form", "method"]
}
