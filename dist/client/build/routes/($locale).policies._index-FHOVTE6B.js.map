{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).policies._index.jsx"],
  "sourcesContent": ["import {json} from '@shopify/remix-oxygen';\nimport {useLoaderData, Link} from '@remix-run/react';\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({context}) {\n  const data = await context.storefront.query(POLICIES_QUERY);\n  const policies = Object.values(data.shop || {});\n\n  if (!policies.length) {\n    throw new Response('No policies found', {status: 404});\n  }\n\n  return json({policies});\n}\n\nexport default function Policies() {\n  /** @type {LoaderReturnData} */\n  const {policies} = useLoaderData();\n\n  return (\n    <div className=\"policies\">\n      <h1>Policies</h1>\n      <div>\n        {policies.map((policy) => {\n          if (!policy) return null;\n          return (\n            <fieldset key={policy.id}>\n              <Link to={`/policies/${policy.handle}`}>{policy.title}</Link>\n            </fieldset>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nconst POLICIES_QUERY = `#graphql\n  fragment PolicyItem on ShopPolicy {\n    id\n    title\n    handle\n  }\n  query Policies ($country: CountryCode, $language: LanguageCode)\n    @inContext(country: $country, language: $language) {\n    shop {\n      privacyPolicy {\n        ...PolicyItem\n      }\n      shippingPolicy {\n        ...PolicyItem\n      }\n      termsOfService {\n        ...PolicyItem\n      }\n      refundPolicy {\n        ...PolicyItem\n      }\n      subscriptionPolicy {\n        id\n        title\n        handle\n      }\n    }\n  }\n`;\n\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n"],
  "mappings": "wHAsBI,IAAAA,EAAA,OALW,SAARC,GAA4B,CAEjC,GAAM,CAAC,SAAAC,CAAQ,EAAIC,EAAc,EAEjC,SACE,QAAC,OAAI,UAAU,WACb,oBAAC,MAAG,oBAAQ,KACZ,OAAC,OACE,SAAAD,EAAS,IAAKE,GACRA,KAEH,OAAC,YACC,mBAACC,EAAA,CAAK,GAAI,aAAaD,EAAO,SAAW,SAAAA,EAAO,MAAM,GADzCA,EAAO,EAEtB,EAJkB,IAMrB,EACH,GACF,CAEJ",
  "names": ["import_jsx_runtime", "Policies", "policies", "useLoaderData", "policy", "Link"]
}
