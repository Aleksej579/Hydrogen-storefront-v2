{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account_.login.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/($locale).account_.login.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/($locale).account_.login.jsx\");\n  import.meta.hot.lastModified = \"1702303141594.8823\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from '@shopify/remix-oxygen';\nimport { Form, Link, useActionData } from '@remix-run/react';\n\n/**\n * @type {MetaFunction}\n */\nexport const meta = () => {\n  return [{\n    title: 'Login'\n  }];\n};\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({\n  context\n}) {\n  if (await context.session.get('customerAccessToken')) {\n    return redirect('/account');\n  }\n  return json({});\n}\n\n/**\n * @param {ActionFunctionArgs}\n */\nexport async function action({\n  request,\n  context\n}) {\n  const {\n    session,\n    storefront\n  } = context;\n  if (request.method !== 'POST') {\n    return json({\n      error: 'Method not allowed'\n    }, {\n      status: 405\n    });\n  }\n  try {\n    const form = await request.formData();\n    const email = String(form.has('email') ? form.get('email') : '');\n    const password = String(form.has('password') ? form.get('password') : '');\n    const validInputs = Boolean(email && password);\n    if (!validInputs) {\n      throw new Error('Please provide both an email and a password.');\n    }\n    const {\n      customerAccessTokenCreate\n    } = await storefront.mutate(LOGIN_MUTATION, {\n      variables: {\n        input: {\n          email,\n          password\n        }\n      }\n    });\n    if (!customerAccessTokenCreate?.customerAccessToken?.accessToken) {\n      throw new Error(customerAccessTokenCreate?.customerUserErrors[0].message);\n    }\n    const {\n      customerAccessToken\n    } = customerAccessTokenCreate;\n    session.set('customerAccessToken', customerAccessToken);\n    return redirect('/account', {\n      headers: {\n        'Set-Cookie': await session.commit()\n      }\n    });\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({\n        error: error.message\n      }, {\n        status: 400\n      });\n    }\n    return json({\n      error\n    }, {\n      status: 400\n    });\n  }\n}\nexport default function Login() {\n  _s();\n  /** @type {ActionReturnData} */\n  const data = useActionData();\n  const error = data?.error || null;\n  return <div className=\"login\">\n      <h1>Sign in.</h1>\n      <Form method=\"POST\">\n        <fieldset>\n          <label htmlFor=\"email\">Email address</label>\n          <input id=\"email\" name=\"email\" type=\"email\" autoComplete=\"email\" required placeholder=\"Email address\" aria-label=\"Email address\"\n        // eslint-disable-next-line jsx-a11y/no-autofocus\n        autoFocus />\n          <label htmlFor=\"password\">Password</label>\n          <input id=\"password\" name=\"password\" type=\"password\" autoComplete=\"current-password\" placeholder=\"Password\" aria-label=\"Password\" minLength={8} required />\n        </fieldset>\n        {error ? <p>\n            <mark>\n              <small>{error}</small>\n            </mark>\n          </p> : <br />}\n        <button type=\"submit\">Sign in</button>\n      </Form>\n      <br />\n      <div>\n        <p>\n          <Link to=\"/account/recover\">Forgot password \u2192</Link>\n        </p>\n        <p>\n          <Link to=\"/account/register\">Register \u2192</Link>\n        </p>\n      </div>\n    </div>;\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customeraccesstokencreate\n_s(Login, \"EuQJlwp+1/dClAy+OhUaWQ2c6r8=\", false, function () {\n  return [useActionData];\n});\n_c = Login;\nconst LOGIN_MUTATION = `#graphql\n  mutation login($input: CustomerAccessTokenCreateInput!) {\n    customerAccessTokenCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n    }\n  }\n`;\n\n/**\n * @typedef {{\n *   error: string | null;\n * }} ActionResponse\n */\n\n/** @typedef {import('@shopify/remix-oxygen').ActionFunctionArgs} ActionFunctionArgs */\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof action>} ActionReturnData */\nvar _c;\n$RefreshReg$(_c, \"Login\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAkHM;AAjHN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,8CAAgD,EAAE;AAAA,EAC3F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAyC;AACzC,cAAY,IAAI,eAAe;AACjC;AASO,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,CAAC;AACH;AA6Ee,SAAR,QAAyB;AAC9B,KAAG;AAEH,QAAM,OAAO,cAAc;AAC3B,QAAM,QAAQ,MAAM,SAAS;AAC7B,SAAO,mDAAC,SAAI,WAAU,SAClB;AAAA,uDAAC,QAAG,wBAAJ;AAAA;AAAA;AAAA;AAAA,WAAY;AAAA,IACZ,mDAAC,QAAK,QAAO,QACX;AAAA,yDAAC,cACC;AAAA,2DAAC,WAAM,SAAQ,SAAQ,6BAAvB;AAAA;AAAA;AAAA;AAAA,eAAoC;AAAA,QACpC;AAAA,UAAC;AAAA;AAAA,YAAM,IAAG;AAAA,YAAQ,MAAK;AAAA,YAAQ,MAAK;AAAA,YAAQ,cAAa;AAAA,YAAQ,UAAQ;AAAA,YAAC,aAAY;AAAA,YAAgB,cAAW;AAAA,YAEnH,WAAS;AAAA;AAAA,UAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAEQ;AAAA,QACR,mDAAC,WAAM,SAAQ,YAAW,wBAA1B;AAAA;AAAA;AAAA;AAAA,eAAkC;AAAA,QAClC,mDAAC,WAAM,IAAG,YAAW,MAAK,YAAW,MAAK,YAAW,cAAa,oBAAmB,aAAY,YAAW,cAAW,YAAW,WAAW,GAAG,UAAQ,QAAxJ;AAAA;AAAA;AAAA;AAAA,eAAyJ;AAAA,WAN3J;AAAA;AAAA;AAAA;AAAA,aAOA;AAAA,MACC,QAAQ,mDAAC,OACN,6DAAC,UACC,6DAAC,WAAO,mBAAR;AAAA;AAAA;AAAA;AAAA,aAAc,KADhB;AAAA;AAAA;AAAA;AAAA,aAEA,KAHK;AAAA;AAAA;AAAA;AAAA,aAIP,IAAO,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,MACb,mDAAC,YAAO,MAAK,UAAS,uBAAtB;AAAA;AAAA;AAAA;AAAA,aAA6B;AAAA,SAd/B;AAAA;AAAA;AAAA;AAAA,WAeA;AAAA,IACA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,WAAI;AAAA,IACJ,mDAAC,SACC;AAAA,yDAAC,OACC,6DAAC,QAAK,IAAG,oBAAmB,sCAA5B;AAAA;AAAA;AAAA;AAAA,aAA6C,KAD/C;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,OACC,6DAAC,QAAK,IAAG,qBAAoB,+BAA7B;AAAA;AAAA;AAAA;AAAA,aAAuC,KADzC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SANF;AAAA;AAAA;AAAA;AAAA,WAOA;AAAA,OA1BG;AAAA;AAAA;AAAA;AAAA,SA2BL;AACJ;AAGA,GAAG,OAAO,gCAAgC,OAAO,WAAY;AAC3D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AA4BL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
