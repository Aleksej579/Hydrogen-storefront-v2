{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account.profile.jsx"],
  "sourcesContent": ["import {json, redirect} from '@shopify/remix-oxygen';\nimport {\n  Form,\n  useActionData,\n  useNavigation,\n  useOutletContext,\n} from '@remix-run/react';\n\n/**\n * @type {MetaFunction}\n */\nexport const meta = () => {\n  return [{title: 'Profile'}];\n};\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({context}) {\n  const customerAccessToken = await context.session.get('customerAccessToken');\n  if (!customerAccessToken) {\n    return redirect('/account/login');\n  }\n  return json({});\n}\n\n/**\n * @param {ActionFunctionArgs}\n */\nexport async function action({request, context}) {\n  const {session, storefront} = context;\n\n  if (request.method !== 'PUT') {\n    return json({error: 'Method not allowed'}, {status: 405});\n  }\n\n  const form = await request.formData();\n  const customerAccessToken = await session.get('customerAccessToken');\n  if (!customerAccessToken) {\n    return json({error: 'Unauthorized'}, {status: 401});\n  }\n\n  try {\n    const password = getPassword(form);\n    const customer = {};\n    const validInputKeys = [\n      'firstName',\n      'lastName',\n      'email',\n      'password',\n      'phone',\n    ];\n    for (const [key, value] of form.entries()) {\n      if (!validInputKeys.includes(key)) {\n        continue;\n      }\n      if (key === 'acceptsMarketing') {\n        customer.acceptsMarketing = value === 'on';\n      }\n      if (typeof value === 'string' && value.length) {\n        customer[key] = value;\n      }\n    }\n\n    if (password) {\n      customer.password = password;\n    }\n\n    // update customer and possibly password\n    const updated = await storefront.mutate(CUSTOMER_UPDATE_MUTATION, {\n      variables: {\n        customerAccessToken: customerAccessToken.accessToken,\n        customer,\n      },\n    });\n\n    // check for mutation errors\n    if (updated.customerUpdate?.customerUserErrors?.length) {\n      return json(\n        {error: updated.customerUpdate?.customerUserErrors[0]},\n        {status: 400},\n      );\n    }\n\n    // update session with the updated access token\n    if (updated.customerUpdate?.customerAccessToken?.accessToken) {\n      session.set(\n        'customerAccessToken',\n        updated.customerUpdate?.customerAccessToken,\n      );\n    }\n\n    return json(\n      {error: null, customer: updated.customerUpdate?.customer},\n      {\n        headers: {\n          'Set-Cookie': await session.commit(),\n        },\n      },\n    );\n  } catch (error) {\n    return json({error: error.message, customer: null}, {status: 400});\n  }\n}\n\nexport default function AccountProfile() {\n  const account = useOutletContext();\n  const {state} = useNavigation();\n  /** @type {ActionReturnData} */\n  const action = useActionData();\n  const customer = action?.customer ?? account?.customer;\n\n  return (\n    <div className=\"account-profile\">\n      <h2>My profile</h2>\n      <br />\n      <Form method=\"PUT\">\n        <legend>Personal information</legend>\n        <fieldset>\n          <label htmlFor=\"firstName\">First name</label>\n          <input\n            id=\"firstName\"\n            name=\"firstName\"\n            type=\"text\"\n            autoComplete=\"given-name\"\n            placeholder=\"First name\"\n            aria-label=\"First name\"\n            defaultValue={customer.firstName ?? ''}\n            minLength={2}\n          />\n          <label htmlFor=\"lastName\">Last name</label>\n          <input\n            id=\"lastName\"\n            name=\"lastName\"\n            type=\"text\"\n            autoComplete=\"family-name\"\n            placeholder=\"Last name\"\n            aria-label=\"Last name\"\n            defaultValue={customer.lastName ?? ''}\n            minLength={2}\n          />\n          <label htmlFor=\"phone\">Mobile</label>\n          <input\n            id=\"phone\"\n            name=\"phone\"\n            type=\"tel\"\n            autoComplete=\"tel\"\n            placeholder=\"Mobile\"\n            aria-label=\"Mobile\"\n            defaultValue={customer.phone ?? ''}\n          />\n          <label htmlFor=\"email\">Email address</label>\n          <input\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            autoComplete=\"email\"\n            required\n            placeholder=\"Email address\"\n            aria-label=\"Email address\"\n            defaultValue={customer.email ?? ''}\n          />\n          <div className=\"account-profile-marketing\">\n            <input\n              id=\"acceptsMarketing\"\n              name=\"acceptsMarketing\"\n              type=\"checkbox\"\n              placeholder=\"Accept marketing\"\n              aria-label=\"Accept marketing\"\n              defaultChecked={customer.acceptsMarketing}\n            />\n            <label htmlFor=\"acceptsMarketing\">\n              &nbsp; Subscribed to marketing communications\n            </label>\n          </div>\n        </fieldset>\n        <br />\n        <legend>Change password (optional)</legend>\n        <fieldset>\n          <label htmlFor=\"currentPassword\">Current password</label>\n          <input\n            id=\"currentPassword\"\n            name=\"currentPassword\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            placeholder=\"Current password\"\n            aria-label=\"Current password\"\n            minLength={8}\n          />\n\n          <label htmlFor=\"newPassword\">New password</label>\n          <input\n            id=\"newPassword\"\n            name=\"newPassword\"\n            type=\"password\"\n            placeholder=\"New password\"\n            aria-label=\"New password\"\n            minLength={8}\n          />\n\n          <label htmlFor=\"newPasswordConfirm\">New password (confirm)</label>\n          <input\n            id=\"newPasswordConfirm\"\n            name=\"newPasswordConfirm\"\n            type=\"password\"\n            placeholder=\"New password (confirm)\"\n            aria-label=\"New password confirm\"\n            minLength={8}\n          />\n          <small>Passwords must be at least 8 characters.</small>\n        </fieldset>\n        {action?.error ? (\n          <p>\n            <mark>\n              <small>{action.error}</small>\n            </mark>\n          </p>\n        ) : (\n          <br />\n        )}\n        <button type=\"submit\" disabled={state !== 'idle'}>\n          {state !== 'idle' ? 'Updating' : 'Update'}\n        </button>\n      </Form>\n    </div>\n  );\n}\n\n/**\n * @param {FormData} form\n */\nfunction getPassword(form) {\n  let password;\n  const currentPassword = form.get('currentPassword');\n  const newPassword = form.get('newPassword');\n  const newPasswordConfirm = form.get('newPasswordConfirm');\n\n  let passwordError;\n  if (newPassword && !currentPassword) {\n    passwordError = new Error('Current password is required.');\n  }\n\n  if (newPassword && newPassword !== newPasswordConfirm) {\n    passwordError = new Error('New passwords must match.');\n  }\n\n  if (newPassword && currentPassword && newPassword === currentPassword) {\n    passwordError = new Error(\n      'New password must be different than current password.',\n    );\n  }\n\n  if (passwordError) {\n    throw passwordError;\n  }\n\n  if (currentPassword && newPassword) {\n    password = newPassword;\n  } else {\n    password = currentPassword;\n  }\n\n  return String(password);\n}\n\nconst CUSTOMER_UPDATE_MUTATION = `#graphql\n  # https://shopify.dev/docs/api/storefront/latest/mutations/customerUpdate\n  mutation customerUpdate(\n    $customerAccessToken: String!,\n    $customer: CustomerUpdateInput!\n    $country: CountryCode\n    $language: LanguageCode\n  ) @inContext(language: $language, country: $country) {\n    customerUpdate(customerAccessToken: $customerAccessToken, customer: $customer) {\n      customer {\n        acceptsMarketing\n        email\n        firstName\n        id\n        lastName\n        phone\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n/**\n * @typedef {{\n *   error: string | null;\n *   customer: CustomerFragment | null;\n * }} ActionResponse\n */\n\n/** @typedef {import('storefrontapi.generated').CustomerFragment} CustomerFragment */\n/** @typedef {import('@shopify/hydrogen/storefront-api-types').CustomerUpdateInput} CustomerUpdateInput */\n/** @typedef {import('@shopify/remix-oxygen').ActionFunctionArgs} ActionFunctionArgs */\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof action>} ActionReturnData */\n"],
  "mappings": "sIAkHM,IAAAA,EAAA,OAvGOC,EAAO,IACX,CAAC,CAAC,MAAO,SAAS,CAAC,EA6Fb,SAARC,GAAkC,CACvC,IAAMC,EAAUC,EAAiB,EAC3B,CAAC,MAAAC,CAAK,EAAIC,EAAc,EAExBC,EAASC,EAAc,EACvBC,EAAWF,GAAQ,UAAYJ,GAAS,SAE9C,SACE,QAAC,OAAI,UAAU,kBACb,oBAAC,MAAG,sBAAU,KACd,OAAC,OAAG,KACJ,QAACO,EAAA,CAAK,OAAO,MACX,oBAAC,UAAO,gCAAoB,KAC5B,QAAC,YACC,oBAAC,SAAM,QAAQ,YAAY,sBAAU,KACrC,OAAC,SACC,GAAG,YACH,KAAK,YACL,KAAK,OACL,aAAa,aACb,YAAY,aACZ,aAAW,aACX,aAAcD,EAAS,WAAa,GACpC,UAAW,EACb,KACA,OAAC,SAAM,QAAQ,WAAW,qBAAS,KACnC,OAAC,SACC,GAAG,WACH,KAAK,WACL,KAAK,OACL,aAAa,cACb,YAAY,YACZ,aAAW,YACX,aAAcA,EAAS,UAAY,GACnC,UAAW,EACb,KACA,OAAC,SAAM,QAAQ,QAAQ,kBAAM,KAC7B,OAAC,SACC,GAAG,QACH,KAAK,QACL,KAAK,MACL,aAAa,MACb,YAAY,SACZ,aAAW,SACX,aAAcA,EAAS,OAAS,GAClC,KACA,OAAC,SAAM,QAAQ,QAAQ,yBAAa,KACpC,OAAC,SACC,GAAG,QACH,KAAK,QACL,KAAK,QACL,aAAa,QACb,SAAQ,GACR,YAAY,gBACZ,aAAW,gBACX,aAAcA,EAAS,OAAS,GAClC,KACA,QAAC,OAAI,UAAU,4BACb,oBAAC,SACC,GAAG,mBACH,KAAK,mBACL,KAAK,WACL,YAAY,mBACZ,aAAW,mBACX,eAAgBA,EAAS,iBAC3B,KACA,OAAC,SAAM,QAAQ,mBAAmB,uDAElC,GACF,GACF,KACA,OAAC,OAAG,KACJ,OAAC,UAAO,sCAA0B,KAClC,QAAC,YACC,oBAAC,SAAM,QAAQ,kBAAkB,4BAAgB,KACjD,OAAC,SACC,GAAG,kBACH,KAAK,kBACL,KAAK,WACL,aAAa,mBACb,YAAY,mBACZ,aAAW,mBACX,UAAW,EACb,KAEA,OAAC,SAAM,QAAQ,cAAc,wBAAY,KACzC,OAAC,SACC,GAAG,cACH,KAAK,cACL,KAAK,WACL,YAAY,eACZ,aAAW,eACX,UAAW,EACb,KAEA,OAAC,SAAM,QAAQ,qBAAqB,kCAAsB,KAC1D,OAAC,SACC,GAAG,qBACH,KAAK,qBACL,KAAK,WACL,YAAY,yBACZ,aAAW,uBACX,UAAW,EACb,KACA,OAAC,SAAM,oDAAwC,GACjD,EACCF,GAAQ,SACP,OAAC,KACC,mBAAC,QACC,mBAAC,SAAO,SAAAA,EAAO,MAAM,EACvB,EACF,KAEA,OAAC,OAAG,KAEN,OAAC,UAAO,KAAK,SAAS,SAAUF,IAAU,OACvC,SAAAA,IAAU,OAAS,WAAa,SACnC,GACF,GACF,CAEJ",
  "names": ["import_jsx_runtime", "meta", "AccountProfile", "account", "useOutletContext", "state", "useNavigation", "action", "useActionData", "customer", "Form"]
}
