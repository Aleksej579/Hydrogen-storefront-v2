{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account.orders._index.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/($locale).account.orders._index.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/($locale).account.orders._index.jsx\");\n  import.meta.hot.lastModified = \"1702303141426.886\";\n}\n// REMIX HMR END\n\nimport { Link, useLoaderData } from '@remix-run/react';\nimport { Money, Pagination, getPaginationVariables } from '@shopify/hydrogen';\nimport { json, redirect } from '@shopify/remix-oxygen';\n\n/**\n * @type {MetaFunction}\n */\nexport const meta = () => {\n  return [{\n    title: 'Orders'\n  }];\n};\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({\n  request,\n  context\n}) {\n  const {\n    session,\n    storefront\n  } = context;\n  const customerAccessToken = await session.get('customerAccessToken');\n  if (!customerAccessToken?.accessToken) {\n    return redirect('/account/login');\n  }\n  try {\n    const paginationVariables = getPaginationVariables(request, {\n      pageBy: 20\n    });\n    const {\n      customer\n    } = await storefront.query(CUSTOMER_ORDERS_QUERY, {\n      variables: {\n        customerAccessToken: customerAccessToken.accessToken,\n        country: storefront.i18n.country,\n        language: storefront.i18n.language,\n        ...paginationVariables\n      },\n      cache: storefront.CacheNone()\n    });\n    if (!customer) {\n      throw new Error('Customer not found');\n    }\n    return json({\n      customer\n    });\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({\n        error: error.message\n      }, {\n        status: 400\n      });\n    }\n    return json({\n      error\n    }, {\n      status: 400\n    });\n  }\n}\nexport default function Orders() {\n  _s();\n  /** @type {LoaderReturnData} */\n  const {\n    customer\n  } = useLoaderData();\n  const {\n    orders,\n    numberOfOrders\n  } = customer;\n  return <div className=\"orders\">\n      <h2>\n        Orders <small>({numberOfOrders})</small>\n      </h2>\n      <br />\n      {orders.nodes.length ? <OrdersTable orders={orders} /> : <EmptyOrders />}\n    </div>;\n}\n\n/**\n * @param {Pick<CustomerOrdersFragment, 'orders'>}\n */\n_s(Orders, \"yijW26QhKvLyTUDP0qUPm3wKw78=\", false, function () {\n  return [useLoaderData];\n});\n_c = Orders;\nfunction OrdersTable({\n  orders\n}) {\n  return <div className=\"acccount-orders\">\n      {orders?.nodes.length ? <Pagination connection={orders}>\n          {({\n        nodes,\n        isLoading,\n        PreviousLink,\n        NextLink\n      }) => {\n        return <>\n                <PreviousLink>\n                  {isLoading ? 'Loading...' : <span>\u2191 Load previous</span>}\n                </PreviousLink>\n                {nodes.map(order => {\n            return <OrderItem key={order.id} order={order} />;\n          })}\n                <NextLink>\n                  {isLoading ? 'Loading...' : <span>Load more \u2193</span>}\n                </NextLink>\n              </>;\n      }}\n        </Pagination> : <EmptyOrders />}\n    </div>;\n}\n_c2 = OrdersTable;\nfunction EmptyOrders() {\n  return <div>\n      <p>You haven&apos;t placed any orders yet.</p>\n      <br />\n      <p>\n        <Link to=\"/collections\">Start Shopping \u2192</Link>\n      </p>\n    </div>;\n}\n\n/**\n * @param {{order: OrderItemFragment}}\n */\n_c3 = EmptyOrders;\nfunction OrderItem({\n  order\n}) {\n  return <>\n      <fieldset>\n        <Link to={`/account/orders/${order.id}`}>\n          <strong>#{order.orderNumber}</strong>\n        </Link>\n        <p>{new Date(order.processedAt).toDateString()}</p>\n        <p>{order.financialStatus}</p>\n        <p>{order.fulfillmentStatus}</p>\n        <Money data={order.currentTotalPrice} />\n        <Link to={`/account/orders/${btoa(order.id)}`}>View Order \u2192</Link>\n      </fieldset>\n      <br />\n    </>;\n}\n_c4 = OrderItem;\nconst ORDER_ITEM_FRAGMENT = `#graphql\n  fragment OrderItem on Order {\n    currentTotalPrice {\n      amount\n      currencyCode\n    }\n    financialStatus\n    fulfillmentStatus\n    id\n    lineItems(first: 10) {\n      nodes {\n        title\n        variant {\n          image {\n            url\n            altText\n            height\n            width\n          }\n        }\n      }\n    }\n    orderNumber\n    customerUrl\n    statusUrl\n    processedAt\n  }\n`;\nexport const CUSTOMER_FRAGMENT = `#graphql\n  fragment CustomerOrders on Customer {\n    numberOfOrders\n    orders(\n      sortKey: PROCESSED_AT,\n      reverse: true,\n      first: $first,\n      last: $last,\n      before: $startCursor,\n      after: $endCursor\n    ) {\n      nodes {\n        ...OrderItem\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        endCursor\n        startCursor\n      }\n    }\n  }\n  ${ORDER_ITEM_FRAGMENT}\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/queries/customer\nconst CUSTOMER_ORDERS_QUERY = `#graphql\n  ${CUSTOMER_FRAGMENT}\n  query CustomerOrders(\n    $country: CountryCode\n    $customerAccessToken: String!\n    $endCursor: String\n    $first: Int\n    $language: LanguageCode\n    $last: Int\n    $startCursor: String\n  ) @inContext(country: $country, language: $language) {\n    customer(customerAccessToken: $customerAccessToken) {\n      ...CustomerOrders\n    }\n  }\n`;\n\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @typedef {import('storefrontapi.generated').CustomerOrdersFragment} CustomerOrdersFragment */\n/** @typedef {import('storefrontapi.generated').OrderItemFragment} OrderItemFragment */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Orders\");\n$RefreshReg$(_c2, \"OrdersTable\");\n$RefreshReg$(_c3, \"EmptyOrders\");\n$RefreshReg$(_c4, \"OrderItem\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
