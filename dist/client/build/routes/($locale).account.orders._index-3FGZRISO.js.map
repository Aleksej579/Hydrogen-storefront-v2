{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account.orders._index.jsx"],
  "sourcesContent": ["import {Link, useLoaderData} from '@remix-run/react';\nimport {Money, Pagination, getPaginationVariables} from '@shopify/hydrogen';\nimport {json, redirect} from '@shopify/remix-oxygen';\n\n/**\n * @type {MetaFunction}\n */\nexport const meta = () => {\n  return [{title: 'Orders'}];\n};\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({request, context}) {\n  const {session, storefront} = context;\n\n  const customerAccessToken = await session.get('customerAccessToken');\n  if (!customerAccessToken?.accessToken) {\n    return redirect('/account/login');\n  }\n\n  try {\n    const paginationVariables = getPaginationVariables(request, {\n      pageBy: 20,\n    });\n\n    const {customer} = await storefront.query(CUSTOMER_ORDERS_QUERY, {\n      variables: {\n        customerAccessToken: customerAccessToken.accessToken,\n        country: storefront.i18n.country,\n        language: storefront.i18n.language,\n        ...paginationVariables,\n      },\n      cache: storefront.CacheNone(),\n    });\n\n    if (!customer) {\n      throw new Error('Customer not found');\n    }\n\n    return json({customer});\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({error: error.message}, {status: 400});\n    }\n    return json({error}, {status: 400});\n  }\n}\n\nexport default function Orders() {\n  /** @type {LoaderReturnData} */\n  const {customer} = useLoaderData();\n  const {orders, numberOfOrders} = customer;\n  return (\n    <div className=\"orders\">\n      <h2>\n        Orders <small>({numberOfOrders})</small>\n      </h2>\n      <br />\n      {orders.nodes.length ? <OrdersTable orders={orders} /> : <EmptyOrders />}\n    </div>\n  );\n}\n\n/**\n * @param {Pick<CustomerOrdersFragment, 'orders'>}\n */\nfunction OrdersTable({orders}) {\n  return (\n    <div className=\"acccount-orders\">\n      {orders?.nodes.length ? (\n        <Pagination connection={orders}>\n          {({nodes, isLoading, PreviousLink, NextLink}) => {\n            return (\n              <>\n                <PreviousLink>\n                  {isLoading ? 'Loading...' : <span>\u2191 Load previous</span>}\n                </PreviousLink>\n                {nodes.map((order) => {\n                  return <OrderItem key={order.id} order={order} />;\n                })}\n                <NextLink>\n                  {isLoading ? 'Loading...' : <span>Load more \u2193</span>}\n                </NextLink>\n              </>\n            );\n          }}\n        </Pagination>\n      ) : (\n        <EmptyOrders />\n      )}\n    </div>\n  );\n}\n\nfunction EmptyOrders() {\n  return (\n    <div>\n      <p>You haven&apos;t placed any orders yet.</p>\n      <br />\n      <p>\n        <Link to=\"/collections\">Start Shopping \u2192</Link>\n      </p>\n    </div>\n  );\n}\n\n/**\n * @param {{order: OrderItemFragment}}\n */\nfunction OrderItem({order}) {\n  return (\n    <>\n      <fieldset>\n        <Link to={`/account/orders/${order.id}`}>\n          <strong>#{order.orderNumber}</strong>\n        </Link>\n        <p>{new Date(order.processedAt).toDateString()}</p>\n        <p>{order.financialStatus}</p>\n        <p>{order.fulfillmentStatus}</p>\n        <Money data={order.currentTotalPrice} />\n        <Link to={`/account/orders/${btoa(order.id)}`}>View Order \u2192</Link>\n      </fieldset>\n      <br />\n    </>\n  );\n}\n\nconst ORDER_ITEM_FRAGMENT = `#graphql\n  fragment OrderItem on Order {\n    currentTotalPrice {\n      amount\n      currencyCode\n    }\n    financialStatus\n    fulfillmentStatus\n    id\n    lineItems(first: 10) {\n      nodes {\n        title\n        variant {\n          image {\n            url\n            altText\n            height\n            width\n          }\n        }\n      }\n    }\n    orderNumber\n    customerUrl\n    statusUrl\n    processedAt\n  }\n`;\n\nexport const CUSTOMER_FRAGMENT = `#graphql\n  fragment CustomerOrders on Customer {\n    numberOfOrders\n    orders(\n      sortKey: PROCESSED_AT,\n      reverse: true,\n      first: $first,\n      last: $last,\n      before: $startCursor,\n      after: $endCursor\n    ) {\n      nodes {\n        ...OrderItem\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        endCursor\n        startCursor\n      }\n    }\n  }\n  ${ORDER_ITEM_FRAGMENT}\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/queries/customer\nconst CUSTOMER_ORDERS_QUERY = `#graphql\n  ${CUSTOMER_FRAGMENT}\n  query CustomerOrders(\n    $country: CountryCode\n    $customerAccessToken: String!\n    $endCursor: String\n    $first: Int\n    $language: LanguageCode\n    $last: Int\n    $startCursor: String\n  ) @inContext(country: $country, language: $language) {\n    customer(customerAccessToken: $customerAccessToken) {\n      ...CustomerOrders\n    }\n  }\n`;\n\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @typedef {import('storefrontapi.generated').CustomerOrdersFragment} CustomerOrdersFragment */\n/** @typedef {import('storefrontapi.generated').OrderItemFragment} OrderItemFragment */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n"],
  "mappings": "oLAyDe,IAAAA,EAAA,OAlDFC,EAAO,IACX,CAAC,CAAC,MAAO,QAAQ,CAAC,EA0CZ,SAARC,GAA0B,CAE/B,GAAM,CAAC,SAAAC,CAAQ,EAAIC,EAAc,EAC3B,CAAC,OAAAC,EAAQ,eAAAC,CAAc,EAAIH,EACjC,SACE,QAAC,OAAI,UAAU,SACb,qBAAC,MAAG,uBACK,QAAC,SAAM,cAAEG,EAAe,KAAC,GAClC,KACA,OAAC,OAAG,EACHD,EAAO,MAAM,UAAS,OAACE,EAAA,CAAY,OAAQF,EAAQ,KAAK,OAACG,EAAA,EAAY,GACxE,CAEJ,CAKA,SAASD,EAAY,CAAC,OAAAF,CAAM,EAAG,CAC7B,SACE,OAAC,OAAI,UAAU,kBACZ,SAAAA,GAAQ,MAAM,UACb,OAACI,EAAA,CAAW,WAAYJ,EACrB,UAAC,CAAC,MAAAK,EAAO,UAAAC,EAAW,aAAAC,EAAc,SAAAC,CAAQ,OAEvC,oBACE,oBAACD,EAAA,CACE,SAAAD,EAAY,gBAAe,OAAC,QAAK,gCAAe,EACnD,EACCD,EAAM,IAAKI,MACH,OAACC,EAAA,CAAyB,MAAOD,GAAjBA,EAAM,EAAkB,CAChD,KACD,OAACD,EAAA,CACE,SAAAF,EAAY,gBAAe,OAAC,QAAK,4BAAW,EAC/C,GACF,EAGN,KAEA,OAACH,EAAA,EAAY,EAEjB,CAEJ,CAEA,SAASA,GAAc,CACrB,SACE,QAAC,OACC,oBAAC,KAAE,8CAAuC,KAC1C,OAAC,OAAG,KACJ,OAAC,KACC,mBAACQ,EAAA,CAAK,GAAG,eAAe,iCAAgB,EAC1C,GACF,CAEJ,CAKA,SAASD,EAAU,CAAC,MAAAD,CAAK,EAAG,CAC1B,SACE,oBACE,qBAAC,YACC,oBAACE,EAAA,CAAK,GAAI,mBAAmBF,EAAM,KACjC,oBAAC,UAAO,cAAEA,EAAM,aAAY,EAC9B,KACA,OAAC,KAAG,aAAI,KAAKA,EAAM,WAAW,EAAE,aAAa,EAAE,KAC/C,OAAC,KAAG,SAAAA,EAAM,gBAAgB,KAC1B,OAAC,KAAG,SAAAA,EAAM,kBAAkB,KAC5B,OAACG,EAAA,CAAM,KAAMH,EAAM,kBAAmB,KACtC,OAACE,EAAA,CAAK,GAAI,mBAAmB,KAAKF,EAAM,EAAE,IAAK,6BAAY,GAC7D,KACA,OAAC,OAAG,GACN,CAEJ,CAEA,IAAMI,EAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6BfC,EAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAsB7BD;AAAA,EAIEE,EAAwB;AAAA,IAC1BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": ["import_jsx_runtime", "meta", "Orders", "customer", "useLoaderData", "orders", "numberOfOrders", "OrdersTable", "EmptyOrders", "rr", "nodes", "isLoading", "PreviousLink", "NextLink", "order", "OrderItem", "Link", "Money", "ORDER_ITEM_FRAGMENT", "CUSTOMER_FRAGMENT", "CUSTOMER_ORDERS_QUERY"]
}
