{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).pages.$handle.jsx"],
  "sourcesContent": ["import {json} from '@shopify/remix-oxygen';\nimport {useLoaderData} from '@remix-run/react';\n\n/**\n * @type {MetaFunction<typeof loader>}\n */\nexport const meta = ({data}) => {\n  return [{title: `Hydrogen | ${data?.page.title ?? ''}`}];\n};\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({params, context}) {\n  if (!params.handle) {\n    throw new Error('Missing page handle');\n  }\n\n  const {page} = await context.storefront.query(PAGE_QUERY, {\n    variables: {\n      handle: params.handle,\n    },\n  });\n\n  if (!page) {\n    throw new Response('Not Found', {status: 404});\n  }\n\n  return json({page});\n}\n\nexport default function Page() {\n  /** @type {LoaderReturnData} */\n  const {page} = useLoaderData();\n\n  return (\n    <div className=\"page\">\n      <header>\n        <h1>{page.title}</h1>\n      </header>\n      <main dangerouslySetInnerHTML={{__html: page.body}} />\n    </div>\n  );\n}\n\nconst PAGE_QUERY = `#graphql\n  query Page(\n    $language: LanguageCode,\n    $country: CountryCode,\n    $handle: String!\n  )\n  @inContext(language: $language, country: $country) {\n    page(handle: $handle) {\n      id\n      title\n      body\n      seo {\n        description\n        title\n      }\n    }\n  }\n`;\n\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n"],
  "mappings": "iHAoCI,IAAAA,EAAA,OA9BSC,EAAO,CAAC,CAAC,KAAAC,CAAI,IACjB,CAAC,CAAC,MAAO,cAAcA,GAAM,KAAK,OAAS,IAAI,CAAC,EAwB1C,SAARC,GAAwB,CAE7B,GAAM,CAAC,KAAAC,CAAI,EAAIC,EAAc,EAE7B,SACE,QAAC,OAAI,UAAU,OACb,oBAAC,UACC,mBAAC,MAAI,SAAAD,EAAK,MAAM,EAClB,KACA,OAAC,QAAK,wBAAyB,CAAC,OAAQA,EAAK,IAAI,EAAG,GACtD,CAEJ",
  "names": ["import_jsx_runtime", "meta", "data", "Page", "page", "useLoaderData"]
}
