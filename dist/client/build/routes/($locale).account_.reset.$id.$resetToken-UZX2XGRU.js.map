{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account_.reset.$id.$resetToken.jsx"],
  "sourcesContent": ["import {json, redirect} from '@shopify/remix-oxygen';\nimport {Form, useActionData} from '@remix-run/react';\n\n/**\n * @type {MetaFunction}\n */\nexport const meta = () => {\n  return [{title: 'Reset Password'}];\n};\n\n/**\n * @param {ActionFunctionArgs}\n */\nexport async function action({request, context, params}) {\n  if (request.method !== 'POST') {\n    return json({error: 'Method not allowed'}, {status: 405});\n  }\n  const {id, resetToken} = params;\n  const {session, storefront} = context;\n\n  try {\n    if (!id || !resetToken) {\n      throw new Error('customer token or id not found');\n    }\n\n    const form = await request.formData();\n    const password = form.has('password') ? String(form.get('password')) : '';\n    const passwordConfirm = form.has('passwordConfirm')\n      ? String(form.get('passwordConfirm'))\n      : '';\n    const validInputs = Boolean(password && passwordConfirm);\n    if (validInputs && password !== passwordConfirm) {\n      throw new Error('Please provide matching passwords');\n    }\n\n    const {customerReset} = await storefront.mutate(CUSTOMER_RESET_MUTATION, {\n      variables: {\n        id: `gid://shopify/Customer/${id}`,\n        input: {password, resetToken},\n      },\n    });\n\n    if (customerReset?.customerUserErrors?.length) {\n      throw new Error(customerReset?.customerUserErrors[0].message);\n    }\n\n    if (!customerReset?.customerAccessToken) {\n      throw new Error('Access token not found. Please try again.');\n    }\n    session.set('customerAccessToken', customerReset.customerAccessToken);\n\n    return redirect('/account', {\n      headers: {\n        'Set-Cookie': await session.commit(),\n      },\n    });\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({error: error.message}, {status: 400});\n    }\n    return json({error}, {status: 400});\n  }\n}\n\nexport default function Reset() {\n  /** @type {ActionReturnData} */\n  const action = useActionData();\n\n  return (\n    <div className=\"account-reset\">\n      <h1>Reset Password.</h1>\n      <p>Enter a new password for your account.</p>\n      <Form method=\"POST\">\n        <fieldset>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            aria-label=\"Password\"\n            autoComplete=\"current-password\"\n            // eslint-disable-next-line jsx-a11y/no-autofocus\n            autoFocus\n            id=\"password\"\n            minLength={8}\n            name=\"password\"\n            placeholder=\"Password\"\n            required\n            type=\"password\"\n          />\n          <label htmlFor=\"passwordConfirm\">Re-enter password</label>\n          <input\n            aria-label=\"Re-enter password\"\n            autoComplete=\"current-password\"\n            id=\"passwordConfirm\"\n            minLength={8}\n            name=\"passwordConfirm\"\n            placeholder=\"Re-enter password\"\n            required\n            type=\"password\"\n          />\n        </fieldset>\n        {action?.error ? (\n          <p>\n            <mark>\n              <small>{action.error}</small>\n            </mark>\n          </p>\n        ) : (\n          <br />\n        )}\n        <button type=\"submit\">Reset</button>\n      </Form>\n      <br />\n      <p>\n        <a href=\"/account/login\">Back to login \u2192</a>\n      </p>\n    </div>\n  );\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customerreset\nconst CUSTOMER_RESET_MUTATION = `#graphql\n  mutation customerReset(\n    $id: ID!,\n    $input: CustomerResetInput!\n    $country: CountryCode\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerReset(id: $id, input: $input) {\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n/**\n * @typedef {{\n *   error: string | null;\n * }} ActionResponse\n */\n\n/** @typedef {import('@shopify/remix-oxygen').ActionFunctionArgs} ActionFunctionArgs */\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof action>} ActionReturnData */\n"],
  "mappings": "mHAsEM,IAAAA,EAAA,OAhEOC,EAAO,IACX,CAAC,CAAC,MAAO,gBAAgB,CAAC,EAyDpB,SAARC,GAAyB,CAE9B,IAAMC,EAASC,EAAc,EAE7B,SACE,QAAC,OAAI,UAAU,gBACb,oBAAC,MAAG,2BAAe,KACnB,OAAC,KAAE,kDAAsC,KACzC,QAACC,EAAA,CAAK,OAAO,OACX,qBAAC,YACC,oBAAC,SAAM,QAAQ,WAAW,oBAAQ,KAClC,OAAC,SACC,aAAW,WACX,aAAa,mBAEb,UAAS,GACT,GAAG,WACH,UAAW,EACX,KAAK,WACL,YAAY,WACZ,SAAQ,GACR,KAAK,WACP,KACA,OAAC,SAAM,QAAQ,kBAAkB,6BAAiB,KAClD,OAAC,SACC,aAAW,oBACX,aAAa,mBACb,GAAG,kBACH,UAAW,EACX,KAAK,kBACL,YAAY,oBACZ,SAAQ,GACR,KAAK,WACP,GACF,EACCF,GAAQ,SACP,OAAC,KACC,mBAAC,QACC,mBAAC,SAAO,SAAAA,EAAO,MAAM,EACvB,EACF,KAEA,OAAC,OAAG,KAEN,OAAC,UAAO,KAAK,SAAS,iBAAK,GAC7B,KACA,OAAC,OAAG,KACJ,OAAC,KACC,mBAAC,KAAE,KAAK,iBAAiB,gCAAe,EAC1C,GACF,CAEJ",
  "names": ["import_jsx_runtime", "meta", "Reset", "action", "useActionData", "Form"]
}
