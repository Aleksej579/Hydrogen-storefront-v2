{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).collections._index.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/($locale).collections._index.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/($locale).collections._index.jsx\");\n  import.meta.hot.lastModified = \"1702303141090.8933\";\n}\n// REMIX HMR END\n\nimport { useLoaderData, Link } from '@remix-run/react';\nimport { json } from '@shopify/remix-oxygen';\nimport { Pagination, getPaginationVariables, Image } from '@shopify/hydrogen';\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({\n  context,\n  request\n}) {\n  const paginationVariables = getPaginationVariables(request, {\n    pageBy: 4\n  });\n  const {\n    collections\n  } = await context.storefront.query(COLLECTIONS_QUERY, {\n    variables: paginationVariables\n  });\n  return json({\n    collections\n  });\n}\nexport default function Collections() {\n  _s();\n  /** @type {LoaderReturnData} */\n  const {\n    collections\n  } = useLoaderData();\n  return <div className=\"collections\">\n      <h1>Collections</h1>\n      <Pagination connection={collections}>\n        {({\n        nodes,\n        isLoading,\n        PreviousLink,\n        NextLink\n      }) => <div>\n            <PreviousLink>\n              {isLoading ? 'Loading...' : <span>\u2191 Load previous</span>}\n            </PreviousLink>\n            <CollectionsGrid collections={nodes} />\n            <NextLink>\n              {isLoading ? 'Loading...' : <span>Load more \u2193</span>}\n            </NextLink>\n          </div>}\n      </Pagination>\n    </div>;\n}\n\n/**\n * @param {{collections: CollectionFragment[]}}\n */\n_s(Collections, \"6brbiW8AhZwVjyj0UPHG6QMQMU4=\", false, function () {\n  return [useLoaderData];\n});\n_c = Collections;\nfunction CollectionsGrid({\n  collections\n}) {\n  return <div className=\"collections-grid\">\n      {collections.map((collection, index) => <CollectionItem key={collection.id} collection={collection} index={index} />)}\n    </div>;\n}\n\n/**\n * @param {{\n *   collection: CollectionFragment;\n *   index: number;\n * }}\n */\n_c2 = CollectionsGrid;\nfunction CollectionItem({\n  collection,\n  index\n}) {\n  return <Link className=\"collection-item\" key={collection.id} to={`/collections/${collection.handle}`} prefetch=\"intent\">\n      {collection?.image && <Image alt={collection.image.altText || collection.title} aspectRatio=\"1/1\" data={collection.image} loading={index < 3 ? 'eager' : undefined} />}\n      <h5>{collection.title}</h5>\n    </Link>;\n}\n_c3 = CollectionItem;\nconst COLLECTIONS_QUERY = `#graphql\n  fragment Collection on Collection {\n    id\n    title\n    handle\n    image {\n      id\n      url\n      altText\n      width\n      height\n    }\n  }\n  query StoreCollections(\n    $country: CountryCode\n    $endCursor: String\n    $first: Int\n    $language: LanguageCode\n    $last: Int\n    $startCursor: String\n  ) @inContext(country: $country, language: $language) {\n    collections(\n      first: $first,\n      last: $last,\n      before: $startCursor,\n      after: $endCursor\n    ) {\n      nodes {\n        ...Collection\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n`;\n\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @typedef {import('storefrontapi.generated').CollectionFragment} CollectionFragment */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Collections\");\n$RefreshReg$(_c2, \"CollectionsGrid\");\n$RefreshReg$(_c3, \"CollectionItem\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAmDM;AAlDN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,kDAAoD,EAAE;AAAA,EAC/F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA6C;AAC7C,cAAY,IAAI,eAAe;AACjC;AA0Be,SAAR,cAA+B;AACpC,KAAG;AAEH,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,SAAO,mDAAC,SAAI,WAAU,eAClB;AAAA,uDAAC,QAAG,2BAAJ;AAAA;AAAA;AAAA;AAAA,WAAe;AAAA,IACf,mDAAC,MAAW,YAAY,aACrB,WAAC;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,MAAM,mDAAC,SACD;AAAA,yDAAC,gBACE,sBAAY,eAAe,mDAAC,UAAK,oCAAN;AAAA;AAAA;AAAA;AAAA,aAAqB,KADnD;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,mBAAgB,aAAa,SAA9B;AAAA;AAAA;AAAA;AAAA,aAAqC;AAAA,MACrC,mDAAC,YACE,sBAAY,eAAe,mDAAC,UAAK,gCAAN;AAAA;AAAA;AAAA;AAAA,aAAiB,KAD/C;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAPA;AAAA;AAAA;AAAA;AAAA,WAQF,KAdJ;AAAA;AAAA;AAAA;AAAA,WAeA;AAAA,OAjBG;AAAA;AAAA;AAAA;AAAA,SAkBL;AACJ;AAKA,GAAG,aAAa,gCAAgC,OAAO,WAAY;AACjE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,SAAS,gBAAgB;AAAA,EACvB;AACF,GAAG;AACD,SAAO,mDAAC,SAAI,WAAU,oBACjB,sBAAY,IAAI,CAAC,YAAY,UAAU,mDAAC,kBAAmC,YAAwB,SAAvC,WAAW,IAAhC;AAAA;AAAA;AAAA;AAAA,SAA0E,CAAE,KADjH;AAAA;AAAA;AAAA;AAAA,SAEL;AACJ;AAQA,MAAM;AACN,SAAS,eAAe;AAAA,EACtB;AAAA,EACA;AACF,GAAG;AACD,SAAO,mDAAC,QAAK,WAAU,mBAAsC,IAAI,gBAAgB,WAAW,UAAU,UAAS,UAC1G;AAAA,gBAAY,SAAS,mDAAC,SAAM,KAAK,WAAW,MAAM,WAAW,WAAW,OAAO,aAAY,OAAM,MAAM,WAAW,OAAO,SAAS,QAAQ,IAAI,UAAU,UAAnI;AAAA;AAAA;AAAA;AAAA,WAA8I;AAAA,IACpK,mDAAC,QAAI,qBAAW,SAAhB;AAAA;AAAA;AAAA;AAAA,WAAsB;AAAA,OAFoB,WAAW,IAAlD;AAAA;AAAA;AAAA;AAAA,SAGL;AACJ;AACA,MAAM;AA4CN,IAAI;AAAJ,IAAQ;AAAR,IAAa;AACb,aAAa,IAAI,aAAa;AAC9B,aAAa,KAAK,iBAAiB;AACnC,aAAa,KAAK,gBAAgB;AAElC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
