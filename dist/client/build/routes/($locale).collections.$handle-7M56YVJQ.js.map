{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).collections.$handle.jsx"],
  "sourcesContent": ["import {json, redirect} from '@shopify/remix-oxygen';\nimport {useLoaderData, Link} from '@remix-run/react';\nimport {\n  Pagination,\n  getPaginationVariables,\n  Image,\n  Money,\n} from '@shopify/hydrogen';\nimport {useVariantUrl} from '~/utils';\n\n/**\n * @type {MetaFunction<typeof loader>}\n */\nexport const meta = ({data}) => {\n  return [{title: `Hydrogen | ${data?.collection.title ?? ''} Collection`}];\n};\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({request, params, context}) {\n  const {handle} = params;\n  const {storefront} = context;\n  const paginationVariables = getPaginationVariables(request, {\n    pageBy: 8,\n  });\n\n  if (!handle) {\n    return redirect('/collections');\n  }\n\n  const {collection} = await storefront.query(COLLECTION_QUERY, {\n    variables: {handle, ...paginationVariables},\n  });\n\n  if (!collection) {\n    throw new Response(`Collection ${handle} not found`, {\n      status: 404,\n    });\n  }\n  return json({collection});\n}\n\nexport default function Collection() {\n  /** @type {LoaderReturnData} */\n  const {collection} = useLoaderData();\n\n  return (\n    <div className=\"collection mt-6\">\n      <h1>{collection.title}</h1>\n      <p className=\"collection-description\">{collection.description}</p>\n      <Pagination connection={collection.products}>\n        {({nodes, isLoading, PreviousLink, NextLink}) => (\n          <>\n            <PreviousLink>\n              {isLoading ? 'Loading...' : <span>\u2191 Load previous</span>}\n            </PreviousLink>\n            <ProductsGrid products={nodes} />\n            <br />\n            <NextLink>\n              {isLoading ? 'Loading...' : <span>Load more \u2193</span>}\n            </NextLink>\n          </>\n        )}\n      </Pagination>\n    </div>\n  );\n}\n\n/**\n * @param {{products: ProductItemFragment[]}}\n */\nfunction ProductsGrid({products}) {\n  return (\n    <div className=\"products-grid\">\n      {products.map((product, index) => {\n        return (\n          <ProductItem\n            key={product.id}\n            product={product}\n            loading={index < 8 ? 'eager' : undefined}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\n/**\n * @param {{\n *   product: ProductItemFragment;\n *   loading?: 'eager' | 'lazy';\n * }}\n */\nfunction ProductItem({product, loading}) {\n  const variant = product.variants.nodes[0];\n  const variantUrl = useVariantUrl(product.handle, variant.selectedOptions);\n  return (\n    <Link\n      className=\"product-item\"\n      key={product.id}\n      prefetch=\"intent\"\n      to={variantUrl}\n    >\n      {product.featuredImage && (\n        <Image\n          alt={product.featuredImage.altText || product.title}\n          aspectRatio=\"1/1\"\n          data={product.featuredImage}\n          loading={loading}\n          sizes=\"(min-width: 45em) 400px, 100vw\"\n        />\n      )}\n      <h4>{product.title}</h4>\n      <small>\n        <Money data={product.priceRange.minVariantPrice} />\n      </small>\n    </Link>\n  );\n}\n\nconst PRODUCT_ITEM_FRAGMENT = `#graphql\n  fragment MoneyProductItem on MoneyV2 {\n    amount\n    currencyCode\n  }\n  fragment ProductItem on Product {\n    id\n    handle\n    title\n    featuredImage {\n      id\n      altText\n      url\n      width\n      height\n    }\n    priceRange {\n      minVariantPrice {\n        ...MoneyProductItem\n      }\n      maxVariantPrice {\n        ...MoneyProductItem\n      }\n    }\n    variants(first: 1) {\n      nodes {\n        selectedOptions {\n          name\n          value\n        }\n      }\n    }\n  }\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/2022-04/objects/collection\nconst COLLECTION_QUERY = `#graphql\n  ${PRODUCT_ITEM_FRAGMENT}\n  query Collection(\n    $handle: String!\n    $country: CountryCode\n    $language: LanguageCode\n    $first: Int\n    $last: Int\n    $startCursor: String\n    $endCursor: String\n  ) @inContext(country: $country, language: $language) {\n    collection(handle: $handle) {\n      id\n      handle\n      title\n      description\n      products(\n        first: $first,\n        last: $last,\n        before: $startCursor,\n        after: $endCursor\n      ) {\n        nodes {\n          ...ProductItem\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          endCursor\n          startCursor\n        }\n      }\n    }\n  }\n`;\n\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('storefrontapi.generated').ProductItemFragment} ProductItemFragment */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n"],
  "mappings": "2OAiDM,IAAAA,EAAA,OApCOC,EAAO,CAAC,CAAC,KAAAC,CAAI,IACjB,CAAC,CAAC,MAAO,cAAcA,GAAM,WAAW,OAAS,eAAe,CAAC,EA6B3D,SAARC,GAA8B,CAEnC,GAAM,CAAC,WAAAC,CAAU,EAAIC,EAAc,EAEnC,SACE,QAAC,OAAI,UAAU,kBACb,oBAAC,MAAI,SAAAD,EAAW,MAAM,KACtB,OAAC,KAAE,UAAU,yBAA0B,SAAAA,EAAW,YAAY,KAC9D,OAACE,EAAA,CAAW,WAAYF,EAAW,SAChC,UAAC,CAAC,MAAAG,EAAO,UAAAC,EAAW,aAAAC,EAAc,SAAAC,CAAQ,OACzC,oBACE,oBAACD,EAAA,CACE,SAAAD,EAAY,gBAAe,OAAC,QAAK,gCAAe,EACnD,KACA,OAACG,EAAA,CAAa,SAAUJ,EAAO,KAC/B,OAAC,OAAG,KACJ,OAACG,EAAA,CACE,SAAAF,EAAY,gBAAe,OAAC,QAAK,4BAAW,EAC/C,GACF,EAEJ,GACF,CAEJ,CAKA,SAASG,EAAa,CAAC,SAAAC,CAAQ,EAAG,CAChC,SACE,OAAC,OAAI,UAAU,gBACZ,SAAAA,EAAS,IAAI,CAACC,EAASC,OAEpB,OAACC,EAAA,CAEC,QAASF,EACT,QAASC,EAAQ,EAAI,QAAU,QAF1BD,EAAQ,EAGf,CAEH,EACH,CAEJ,CAQA,SAASE,EAAY,CAAC,QAAAF,EAAS,QAAAG,CAAO,EAAG,CACvC,IAAMC,EAAUJ,EAAQ,SAAS,MAAM,CAAC,EAClCK,EAAaC,EAAcN,EAAQ,OAAQI,EAAQ,eAAe,EACxE,SACE,QAACG,EAAA,CACC,UAAU,eAEV,SAAS,SACT,GAAIF,EAEH,UAAAL,EAAQ,kBACP,OAACQ,EAAA,CACC,IAAKR,EAAQ,cAAc,SAAWA,EAAQ,MAC9C,YAAY,MACZ,KAAMA,EAAQ,cACd,QAASG,EACT,MAAM,iCACR,KAEF,OAAC,MAAI,SAAAH,EAAQ,MAAM,KACnB,OAAC,SACC,mBAACS,EAAA,CAAM,KAAMT,EAAQ,WAAW,gBAAiB,EACnD,IAhBKA,EAAQ,EAiBf,CAEJ,CAEA,IAAMU,EAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoCxBC,EAAmB;AAAA,IACrBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": ["import_jsx_runtime", "meta", "data", "Collection", "collection", "useLoaderData", "rr", "nodes", "isLoading", "PreviousLink", "NextLink", "ProductsGrid", "products", "product", "index", "ProductItem", "loading", "variant", "variantUrl", "useVariantUrl", "Link", "Image", "Money", "PRODUCT_ITEM_FRAGMENT", "COLLECTION_QUERY"]
}
