{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account_.login.jsx"],
  "sourcesContent": ["import {json, redirect} from '@shopify/remix-oxygen';\nimport {Form, Link, useActionData} from '@remix-run/react';\n\n/**\n * @type {MetaFunction}\n */\nexport const meta = () => {\n  return [{title: 'Login'}];\n};\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({context}) {\n  if (await context.session.get('customerAccessToken')) {\n    return redirect('/account');\n  }\n  return json({});\n}\n\n/**\n * @param {ActionFunctionArgs}\n */\nexport async function action({request, context}) {\n  const {session, storefront} = context;\n\n  if (request.method !== 'POST') {\n    return json({error: 'Method not allowed'}, {status: 405});\n  }\n\n  try {\n    const form = await request.formData();\n    const email = String(form.has('email') ? form.get('email') : '');\n    const password = String(form.has('password') ? form.get('password') : '');\n    const validInputs = Boolean(email && password);\n\n    if (!validInputs) {\n      throw new Error('Please provide both an email and a password.');\n    }\n\n    const {customerAccessTokenCreate} = await storefront.mutate(\n      LOGIN_MUTATION,\n      {\n        variables: {\n          input: {email, password},\n        },\n      },\n    );\n\n    if (!customerAccessTokenCreate?.customerAccessToken?.accessToken) {\n      throw new Error(customerAccessTokenCreate?.customerUserErrors[0].message);\n    }\n\n    const {customerAccessToken} = customerAccessTokenCreate;\n    session.set('customerAccessToken', customerAccessToken);\n\n    return redirect('/account', {\n      headers: {\n        'Set-Cookie': await session.commit(),\n      },\n    });\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({error: error.message}, {status: 400});\n    }\n    return json({error}, {status: 400});\n  }\n}\n\nexport default function Login() {\n  /** @type {ActionReturnData} */\n  const data = useActionData();\n  const error = data?.error || null;\n\n  return (\n    <div className=\"login\">\n      <h1>Sign in.</h1>\n      <Form method=\"POST\">\n        <fieldset>\n          <label htmlFor=\"email\">Email address</label>\n          <input\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            autoComplete=\"email\"\n            required\n            placeholder=\"Email address\"\n            aria-label=\"Email address\"\n            // eslint-disable-next-line jsx-a11y/no-autofocus\n            autoFocus\n          />\n          <label htmlFor=\"password\">Password</label>\n          <input\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            placeholder=\"Password\"\n            aria-label=\"Password\"\n            minLength={8}\n            required\n          />\n        </fieldset>\n        {error ? (\n          <p>\n            <mark>\n              <small>{error}</small>\n            </mark>\n          </p>\n        ) : (\n          <br />\n        )}\n        <button type=\"submit\">Sign in</button>\n      </Form>\n      <br />\n      <div>\n        <p>\n          <Link to=\"/account/recover\">Forgot password \u2192</Link>\n        </p>\n        <p>\n          <Link to=\"/account/register\">Register \u2192</Link>\n        </p>\n      </div>\n    </div>\n  );\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customeraccesstokencreate\nconst LOGIN_MUTATION = `#graphql\n  mutation login($input: CustomerAccessTokenCreateInput!) {\n    customerAccessTokenCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n    }\n  }\n`;\n\n/**\n * @typedef {{\n *   error: string | null;\n * }} ActionResponse\n */\n\n/** @typedef {import('@shopify/remix-oxygen').ActionFunctionArgs} ActionFunctionArgs */\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof action>} ActionReturnData */\n"],
  "mappings": "+HA4EM,IAAAA,EAAA,OAtEOC,EAAO,IACX,CAAC,CAAC,MAAO,OAAO,CAAC,EA8DX,SAARC,GAAyB,CAG9B,IAAMC,EADOC,EAAc,GACP,OAAS,KAE7B,SACE,QAAC,OAAI,UAAU,QACb,oBAAC,MAAG,oBAAQ,KACZ,QAACC,EAAA,CAAK,OAAO,OACX,qBAAC,YACC,oBAAC,SAAM,QAAQ,QAAQ,yBAAa,KACpC,OAAC,SACC,GAAG,QACH,KAAK,QACL,KAAK,QACL,aAAa,QACb,SAAQ,GACR,YAAY,gBACZ,aAAW,gBAEX,UAAS,GACX,KACA,OAAC,SAAM,QAAQ,WAAW,oBAAQ,KAClC,OAAC,SACC,GAAG,WACH,KAAK,WACL,KAAK,WACL,aAAa,mBACb,YAAY,WACZ,aAAW,WACX,UAAW,EACX,SAAQ,GACV,GACF,EACCF,KACC,OAAC,KACC,mBAAC,QACC,mBAAC,SAAO,SAAAA,EAAM,EAChB,EACF,KAEA,OAAC,OAAG,KAEN,OAAC,UAAO,KAAK,SAAS,mBAAO,GAC/B,KACA,OAAC,OAAG,KACJ,QAAC,OACC,oBAAC,KACC,mBAACG,EAAA,CAAK,GAAG,mBAAmB,kCAAiB,EAC/C,KACA,OAAC,KACC,mBAACA,EAAA,CAAK,GAAG,oBAAoB,2BAAU,EACzC,GACF,GACF,CAEJ",
  "names": ["import_jsx_runtime", "meta", "Login", "error", "useActionData", "Form", "Link"]
}
