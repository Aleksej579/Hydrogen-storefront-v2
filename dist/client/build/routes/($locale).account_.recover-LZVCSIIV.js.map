{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account_.recover.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/($locale).account_.recover.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/($locale).account_.recover.jsx\");\n  import.meta.hot.lastModified = \"1702303141634.8816\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from '@shopify/remix-oxygen';\nimport { Form, Link, useActionData } from '@remix-run/react';\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({\n  context\n}) {\n  const customerAccessToken = await context.session.get('customerAccessToken');\n  if (customerAccessToken) {\n    return redirect('/account');\n  }\n  return json({});\n}\n\n/**\n * @param {ActionFunctionArgs}\n */\nexport async function action({\n  request,\n  context\n}) {\n  const {\n    storefront\n  } = context;\n  const form = await request.formData();\n  const email = form.has('email') ? String(form.get('email')) : null;\n  if (request.method !== 'POST') {\n    return json({\n      error: 'Method not allowed'\n    }, {\n      status: 405\n    });\n  }\n  try {\n    if (!email) {\n      throw new Error('Please provide an email.');\n    }\n    await storefront.mutate(CUSTOMER_RECOVER_MUTATION, {\n      variables: {\n        email\n      }\n    });\n    return json({\n      resetRequested: true\n    });\n  } catch (error) {\n    const resetRequested = false;\n    if (error instanceof Error) {\n      return json({\n        error: error.message,\n        resetRequested\n      }, {\n        status: 400\n      });\n    }\n    return json({\n      error,\n      resetRequested\n    }, {\n      status: 400\n    });\n  }\n}\nexport default function Recover() {\n  _s();\n  /** @type {ActionReturnData} */\n  const action = useActionData();\n  return <div className=\"account-recover\">\n      <div>\n        {action?.resetRequested ? <>\n            <h1>Request Sent.</h1>\n            <p>\n              If that email address is in our system, you will receive an email\n              with instructions about how to reset your password in a few\n              minutes.\n            </p>\n            <br />\n            <Link to=\"/account/login\">Return to Login</Link>\n          </> : <>\n            <h1>Forgot Password.</h1>\n            <p>\n              Enter the email address associated with your account to receive a\n              link to reset your password.\n            </p>\n            <br />\n            <Form method=\"POST\">\n              <fieldset>\n                <label htmlFor=\"email\">Email</label>\n                <input aria-label=\"Email address\" autoComplete=\"email\"\n            // eslint-disable-next-line jsx-a11y/no-autofocus\n            autoFocus id=\"email\" name=\"email\" placeholder=\"Email address\" required type=\"email\" />\n              </fieldset>\n              {action?.error ? <p>\n                  <mark>\n                    <small>{action.error}</small>\n                  </mark>\n                </p> : <br />}\n              <button type=\"submit\">Request Reset Link</button>\n            </Form>\n            <div>\n              <br />\n              <p>\n                <Link to=\"/account/login\">Login \u2192</Link>\n              </p>\n            </div>\n          </>}\n      </div>\n    </div>;\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customerrecover\n_s(Recover, \"YVzOeyDMt3QGe4z2+NJx3IYjE/U=\", false, function () {\n  return [useActionData];\n});\n_c = Recover;\nconst CUSTOMER_RECOVER_MUTATION = `#graphql\n  mutation customerRecover(\n    $email: String!,\n    $country: CountryCode,\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerRecover(email: $email) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n/**\n * @typedef {{\n *   error?: string;\n *   resetRequested?: boolean;\n * }} ActionResponse\n */\n\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @typedef {import('@shopify/remix-oxygen').ActionFunctionArgs} ActionFunctionArgs */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof action>} ActionReturnData */\nvar _c;\n$RefreshReg$(_c, \"Recover\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
