{
  "version": 3,
  "sources": ["../../../../app/routes/($locale).account_.activate.$id.$activationToken.jsx"],
  "sourcesContent": ["import {json, redirect} from '@shopify/remix-oxygen';\nimport {Form, useActionData} from '@remix-run/react';\n\n/**\n * @type {MetaFunction}\n */\nexport const meta = () => {\n  return [{title: 'Activate Account'}];\n};\n\n/**\n * @param {LoaderFunctionArgs}\n */\nexport async function loader({context}) {\n  if (await context.session.get('customerAccessToken')) {\n    return redirect('/account');\n  }\n  return json({});\n}\n\n/**\n * @param {ActionFunctionArgs}\n */\nexport async function action({request, context, params}) {\n  const {session, storefront} = context;\n  const {id, activationToken} = params;\n\n  if (request.method !== 'POST') {\n    return json({error: 'Method not allowed'}, {status: 405});\n  }\n\n  try {\n    if (!id || !activationToken) {\n      throw new Error('Missing token. The link you followed might be wrong.');\n    }\n\n    const form = await request.formData();\n    const password = form.has('password') ? String(form.get('password')) : null;\n    const passwordConfirm = form.has('passwordConfirm')\n      ? String(form.get('passwordConfirm'))\n      : null;\n\n    const validPasswords =\n      password && passwordConfirm && password === passwordConfirm;\n\n    if (!validPasswords) {\n      throw new Error('Passwords do not match');\n    }\n\n    const {customerActivate} = await storefront.mutate(\n      CUSTOMER_ACTIVATE_MUTATION,\n      {\n        variables: {\n          id: `gid://shopify/Customer/${id}`,\n          input: {\n            password,\n            activationToken,\n          },\n        },\n      },\n    );\n\n    if (customerActivate?.customerUserErrors?.length) {\n      throw new Error(customerActivate.customerUserErrors[0].message);\n    }\n\n    const {customerAccessToken} = customerActivate ?? {};\n    if (!customerAccessToken) {\n      throw new Error('Could not activate account.');\n    }\n    session.set('customerAccessToken', customerAccessToken);\n\n    return redirect('/account', {\n      headers: {\n        'Set-Cookie': await session.commit(),\n      },\n    });\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({error: error.message}, {status: 400});\n    }\n    return json({error}, {status: 400});\n  }\n}\n\nexport default function Activate() {\n  /** @type {ActionReturnData} */\n  const action = useActionData();\n  const error = action?.error ?? null;\n\n  return (\n    <div className=\"account-activate\">\n      <h1>Activate Account.</h1>\n      <p>Create your password to activate your account.</p>\n      <Form method=\"POST\">\n        <fieldset>\n          <label htmlFor=\"password\">Password</label>\n          <input\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            placeholder=\"Password\"\n            aria-label=\"Password\"\n            minLength={8}\n            required\n            // eslint-disable-next-line jsx-a11y/no-autofocus\n            autoFocus\n          />\n          <label htmlFor=\"passwordConfirm\">Re-enter password</label>\n          <input\n            id=\"passwordConfirm\"\n            name=\"passwordConfirm\"\n            type=\"password\"\n            autoComplete=\"current-password\"\n            placeholder=\"Re-enter password\"\n            aria-label=\"Re-enter password\"\n            minLength={8}\n            required\n          />\n        </fieldset>\n        {error ? (\n          <p>\n            <mark>\n              <small>{error}</small>\n            </mark>\n          </p>\n        ) : (\n          <br />\n        )}\n        <button\n          className=\"bg-primary text-contrast rounded py-2 px-4 focus:shadow-outline block w-full\"\n          type=\"submit\"\n        >\n          Save\n        </button>\n      </Form>\n    </div>\n  );\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customeractivate\nconst CUSTOMER_ACTIVATE_MUTATION = `#graphql\n  mutation customerActivate(\n    $id: ID!,\n    $input: CustomerActivateInput!,\n    $country: CountryCode,\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerActivate(id: $id, input: $input) {\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n/**\n * @typedef {{\n *   error: string | null;\n * }} ActionResponse\n */\n\n/** @typedef {import('@shopify/remix-oxygen').ActionFunctionArgs} ActionFunctionArgs */\n/** @typedef {import('@shopify/remix-oxygen').LoaderFunctionArgs} LoaderFunctionArgs */\n/** @template T @typedef {import('@remix-run/react').MetaFunction<T>} MetaFunction */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof loader>} LoaderReturnData */\n/** @typedef {import('@shopify/remix-oxygen').SerializeFrom<typeof action>} ActionReturnData */\n"],
  "mappings": "wHA4FM,IAAAA,EAAA,OAtFOC,EAAO,IACX,CAAC,CAAC,MAAO,kBAAkB,CAAC,EA8EtB,SAARC,GAA4B,CAGjC,IAAMC,EADSC,EAAc,GACP,OAAS,KAE/B,SACE,QAAC,OAAI,UAAU,mBACb,oBAAC,MAAG,6BAAiB,KACrB,OAAC,KAAE,0DAA8C,KACjD,QAACC,EAAA,CAAK,OAAO,OACX,qBAAC,YACC,oBAAC,SAAM,QAAQ,WAAW,oBAAQ,KAClC,OAAC,SACC,GAAG,WACH,KAAK,WACL,KAAK,WACL,aAAa,mBACb,YAAY,WACZ,aAAW,WACX,UAAW,EACX,SAAQ,GAER,UAAS,GACX,KACA,OAAC,SAAM,QAAQ,kBAAkB,6BAAiB,KAClD,OAAC,SACC,GAAG,kBACH,KAAK,kBACL,KAAK,WACL,aAAa,mBACb,YAAY,oBACZ,aAAW,oBACX,UAAW,EACX,SAAQ,GACV,GACF,EACCF,KACC,OAAC,KACC,mBAAC,QACC,mBAAC,SAAO,SAAAA,EAAM,EAChB,EACF,KAEA,OAAC,OAAG,KAEN,OAAC,UACC,UAAU,+EACV,KAAK,SACN,gBAED,GACF,GACF,CAEJ",
  "names": ["import_jsx_runtime", "meta", "Activate", "error", "useActionData", "Form"]
}
