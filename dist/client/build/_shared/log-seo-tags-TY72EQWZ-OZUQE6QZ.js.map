{
  "version": 3,
  "sources": ["../../../../node_modules/@shopify/hydrogen/src/seo/log-seo-tags.ts"],
  "sourcesContent": ["import type {CustomHeadTagObject} from './generate-seo-tags';\n\nexport default function Logger({headTags}: {headTags: CustomHeadTagObject[]}) {\n  logSeoTags(headTags);\n\n  return null;\n}\n\nconst headingStyle = 'text-transform: uppercase;';\nconst titleStyle =\n  'text-transform: uppercase; font-weight: bold; text-transform: uppercase;font-weight: bold';\n\nexport function logSeoTags(headTags: CustomHeadTagObject[]) {\n  console.log(' ');\n  console.log('%cSEO Meta Tags', `${titleStyle}`);\n  console.log(' ');\n\n  headTags.forEach((tag) => {\n    if (tag.tag === 'script') {\n      console.log(`%c• JSON LD `, headingStyle);\n\n      if (tag.children) {\n        try {\n          console.table(JSON.parse(tag.children), ['name', 'content']);\n        } catch {\n          console.log(tag.children);\n        }\n      }\n    } else {\n      console.log(`%c• ${tag.tag} `, headingStyle);\n\n      if (tag.children) {\n        if (typeof tag.children === 'string') {\n          console.log(`↳ ${tag.children}`);\n        } else {\n          try {\n            Object.entries(JSON.parse(tag.children)).map(([key, val]) =>\n              console.log(`↳ ${val}`),\n            );\n          } catch {\n            console.log(tag.children);\n          }\n        }\n      }\n\n      if (tag.props.property === 'og:image:url') {\n        const urlKey = tag.props.content as string;\n\n        fetchImage(urlKey)\n          .then((image) => {\n            const imageStyle = `font-size: 400px; padding: 10px; background: white url(${image}) no-repeat center; background-size: contain;`;\n\n            console.log(`%c• Share image preview`, headingStyle);\n            console.log('%c  ', imageStyle);\n            console.log(`↳ ${urlKey}`);\n          })\n          .catch((err) => {\n            console.error(err);\n          });\n      }\n\n      Object.entries(tag.props).map(([key, val]) => {\n        console.log(`↳ ${key} → ${val}`);\n      });\n    }\n    console.log(' ');\n  });\n}\n\nasync function fetchImage(url: string) {\n  const result = await fetch(url);\n  const data = await result.blob();\n  const buff = await data.arrayBuffer();\n  const base64String = arrayBufferToBase64(buff);\n\n  return `data:image/png;base64,${base64String}`;\n}\n\nfunction arrayBufferToBase64(buffer: ArrayBuffer) {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  const len = bytes.byteLength;\n\n  for (let index = 0; index < len; index++) {\n    binary += String.fromCharCode(bytes[index]);\n  }\n\n  return btoa(binary);\n}\n"],
  "mappings": ";;;AAEe,SAARA,EAAwB,EAAC,UAAAC,EAAQ,GAAsC;AAC5E,SAAAC,EAAWD,CAAQ,GAEZ;AACT;AAEA,IAAME,IAAe;AAArB,IACMC,IACJ;AAEK,SAASF,EAAWD,GAAiC;AAC1D,UAAQ,IAAI,GAAG,GACf,QAAQ,IAAI,mBAAmB,GAAGG,GAAY,GAC9C,QAAQ,IAAI,GAAG,GAEfH,EAAS,QAASI,OAAQ;AACxB,QAAIA,EAAI,QAAQ,UAAA;AAGd,UAFA,QAAQ,IAAI,qBAAgBF,CAAY,GAEpCE,EAAI;AACN,YAAI;AACF,kBAAQ,MAAM,KAAK,MAAMA,EAAI,QAAQ,GAAG,CAAC,QAAQ,SAAS,CAAC;QAC7D,QAAA;AACE,kBAAQ,IAAIA,EAAI,QAClB;QAAA;IAAA,OAKF;AAFA,UAAA,QAAQ,IAAI,YAAW,EAAG,QAEtBA,CAAAA,GAAI,EAAA;AACF,YAAA,OAAW,EAAA,YAAa;AAC1B,kBAAQ,IAAI,UAAS,EAAA,UAAU;;AAE3B,cACF;AAAA,mBAAO,QAAQ,KAAK,MAAU,EAAA,QAAW,CAAA,EAAA,IAAMC,CAAKC,CAAG,GAAA,CAAA,MACrD,QAAQ,IAAI,UAAU,GAE1B,CAAA;UAAA,QAAA;AACE,oBAAYF,IAAI,EAAA,QAKtB;UAAIA;AAAI,UAAA,EAAA,MAAM,aAAa,gBACnBG;AAAAA,YAAa,IAAA,EAAA,MAAM;AAGtB,UAAA,CAAA,EAAMC,KACL,OAAMC;AAAAA,cAAa,IAAA,0DAA+D;AAElF,kBAAY,IAAA,gCACZ,CAAA,GAAA,QAAY,IAAA,QACZ,CAAA,GAAA,QAAY,IAAA,UACb,GACA;QAAA,CAAA,EAAOC,MACN,OAAA;AAAA,kBAAcA,MAIpB,CAAA;QAAA,CAAA;MAAO;AAAA,aAAQN,QAAS,EAAE,KAAMC,EAAKC,IAAG,CAAM,CAC5C,GAAA,CAAA,MAAA;AAAQ,gBAAI,IAAA,UAAQ,YAGxB,GAAA;MAAA,CAAA;IAAQ;AAAA,YAEZ,IAEA,GAAA;EAAA,CAAA;AAAA;AAAA,eAGe,EAAA,GAAA;AADA,MAAA,IADE,OAAM,OAAMK,MACD,MACF,CAAA,GAAA,KAAA,GAAY,YAG7B;AAAA,SAAA,yBAGT,EAAA,CAASC;AAAoBC;AAAqB,SACnC,EACPC,GAAQ;AAAA,MAAI,IAAA,IAAA,IAAA,IAAiB,WACjB,CAAA,GAAA,IAElB,EAAA;AAAoBC,WAClBC,IAAU,GAAA,IAAA,GAAA;AAAO,SAAA,OAAaF,aAGzB,EAAA,CAAA,CAAA;AAAW,SACpB,KAAA,CAAA;AAAA;",
  "names": ["Logger", "headTags", "logSeoTags", "headingStyle", "titleStyle", "tag", "key", "val", "urlKey", "image", "imageStyle", "err", "url", "arrayBufferToBase64", "buffer", "bytes", "index", "binary"]
}
